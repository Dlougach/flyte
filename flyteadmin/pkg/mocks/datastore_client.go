// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	admin "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/admin"

	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"

	mock "github.com/stretchr/testify/mock"

	protoiface "google.golang.org/protobuf/runtime/protoiface"

	storage "github.com/flyteorg/flyte/flytestdlib/storage"
)

// DatastoreClient is an autogenerated mock type for the DatastoreClient type
type DatastoreClient struct {
	mock.Mock
}

type DatastoreClient_Head struct {
	*mock.Call
}

func (_m DatastoreClient_Head) Return(_a0 storage.Metadata, _a1 error) *DatastoreClient_Head {
	return &DatastoreClient_Head{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatastoreClient) OnHead(ctx context.Context, reference storage.DataReference) *DatastoreClient_Head {
	c_call := _m.On("Head", ctx, reference)
	return &DatastoreClient_Head{Call: c_call}
}

func (_m *DatastoreClient) OnHeadMatch(matchers ...interface{}) *DatastoreClient_Head {
	c_call := _m.On("Head", matchers...)
	return &DatastoreClient_Head{Call: c_call}
}

// Head provides a mock function with given fields: ctx, reference
func (_m *DatastoreClient) Head(ctx context.Context, reference storage.DataReference) (storage.Metadata, error) {
	ret := _m.Called(ctx, reference)

	var r0 storage.Metadata
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference) storage.Metadata); ok {
		r0 = rf(ctx, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, storage.DataReference) error); ok {
		r1 = rf(ctx, reference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatastoreClient_OffloadCompiledWorkflowClosure struct {
	*mock.Call
}

func (_m DatastoreClient_OffloadCompiledWorkflowClosure) Return(_a0 storage.DataReference, _a1 error) *DatastoreClient_OffloadCompiledWorkflowClosure {
	return &DatastoreClient_OffloadCompiledWorkflowClosure{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatastoreClient) OnOffloadCompiledWorkflowClosure(ctx context.Context, closure *core.CompiledWorkflowClosure, identifier *core.Identifier, prefix string) *DatastoreClient_OffloadCompiledWorkflowClosure {
	c_call := _m.On("OffloadCompiledWorkflowClosure", ctx, closure, identifier, prefix)
	return &DatastoreClient_OffloadCompiledWorkflowClosure{Call: c_call}
}

func (_m *DatastoreClient) OnOffloadCompiledWorkflowClosureMatch(matchers ...interface{}) *DatastoreClient_OffloadCompiledWorkflowClosure {
	c_call := _m.On("OffloadCompiledWorkflowClosure", matchers...)
	return &DatastoreClient_OffloadCompiledWorkflowClosure{Call: c_call}
}

// OffloadCompiledWorkflowClosure provides a mock function with given fields: ctx, closure, identifier, prefix
func (_m *DatastoreClient) OffloadCompiledWorkflowClosure(ctx context.Context, closure *core.CompiledWorkflowClosure, identifier *core.Identifier, prefix string) (storage.DataReference, error) {
	ret := _m.Called(ctx, closure, identifier, prefix)

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context, *core.CompiledWorkflowClosure, *core.Identifier, string) storage.DataReference); ok {
		r0 = rf(ctx, closure, identifier, prefix)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.CompiledWorkflowClosure, *core.Identifier, string) error); ok {
		r1 = rf(ctx, closure, identifier, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatastoreClient_OffloadExecutionLiteralMap struct {
	*mock.Call
}

func (_m DatastoreClient_OffloadExecutionLiteralMap) Return(_a0 storage.DataReference, _a1 error) *DatastoreClient_OffloadExecutionLiteralMap {
	return &DatastoreClient_OffloadExecutionLiteralMap{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatastoreClient) OnOffloadExecutionLiteralMap(ctx context.Context, literalMap *core.LiteralMap, identifier *core.WorkflowExecutionIdentifier, prefix string) *DatastoreClient_OffloadExecutionLiteralMap {
	c_call := _m.On("OffloadExecutionLiteralMap", ctx, literalMap, identifier, prefix)
	return &DatastoreClient_OffloadExecutionLiteralMap{Call: c_call}
}

func (_m *DatastoreClient) OnOffloadExecutionLiteralMapMatch(matchers ...interface{}) *DatastoreClient_OffloadExecutionLiteralMap {
	c_call := _m.On("OffloadExecutionLiteralMap", matchers...)
	return &DatastoreClient_OffloadExecutionLiteralMap{Call: c_call}
}

// OffloadExecutionLiteralMap provides a mock function with given fields: ctx, literalMap, identifier, prefix
func (_m *DatastoreClient) OffloadExecutionLiteralMap(ctx context.Context, literalMap *core.LiteralMap, identifier *core.WorkflowExecutionIdentifier, prefix string) (storage.DataReference, error) {
	ret := _m.Called(ctx, literalMap, identifier, prefix)

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context, *core.LiteralMap, *core.WorkflowExecutionIdentifier, string) storage.DataReference); ok {
		r0 = rf(ctx, literalMap, identifier, prefix)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.LiteralMap, *core.WorkflowExecutionIdentifier, string) error); ok {
		r1 = rf(ctx, literalMap, identifier, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatastoreClient_OffloadNodeExecutionLiteralMap struct {
	*mock.Call
}

func (_m DatastoreClient_OffloadNodeExecutionLiteralMap) Return(_a0 storage.DataReference, _a1 error) *DatastoreClient_OffloadNodeExecutionLiteralMap {
	return &DatastoreClient_OffloadNodeExecutionLiteralMap{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatastoreClient) OnOffloadNodeExecutionLiteralMap(ctx context.Context, literalMap *core.LiteralMap, identifier *core.NodeExecutionIdentifier, prefix string) *DatastoreClient_OffloadNodeExecutionLiteralMap {
	c_call := _m.On("OffloadNodeExecutionLiteralMap", ctx, literalMap, identifier, prefix)
	return &DatastoreClient_OffloadNodeExecutionLiteralMap{Call: c_call}
}

func (_m *DatastoreClient) OnOffloadNodeExecutionLiteralMapMatch(matchers ...interface{}) *DatastoreClient_OffloadNodeExecutionLiteralMap {
	c_call := _m.On("OffloadNodeExecutionLiteralMap", matchers...)
	return &DatastoreClient_OffloadNodeExecutionLiteralMap{Call: c_call}
}

// OffloadNodeExecutionLiteralMap provides a mock function with given fields: ctx, literalMap, identifier, prefix
func (_m *DatastoreClient) OffloadNodeExecutionLiteralMap(ctx context.Context, literalMap *core.LiteralMap, identifier *core.NodeExecutionIdentifier, prefix string) (storage.DataReference, error) {
	ret := _m.Called(ctx, literalMap, identifier, prefix)

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context, *core.LiteralMap, *core.NodeExecutionIdentifier, string) storage.DataReference); ok {
		r0 = rf(ctx, literalMap, identifier, prefix)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.LiteralMap, *core.NodeExecutionIdentifier, string) error); ok {
		r1 = rf(ctx, literalMap, identifier, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatastoreClient_OffloadTaskExecutionLiteralMap struct {
	*mock.Call
}

func (_m DatastoreClient_OffloadTaskExecutionLiteralMap) Return(_a0 storage.DataReference, _a1 error) *DatastoreClient_OffloadTaskExecutionLiteralMap {
	return &DatastoreClient_OffloadTaskExecutionLiteralMap{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatastoreClient) OnOffloadTaskExecutionLiteralMap(ctx context.Context, literalMap *core.LiteralMap, identifier *core.TaskExecutionIdentifier, prefix string) *DatastoreClient_OffloadTaskExecutionLiteralMap {
	c_call := _m.On("OffloadTaskExecutionLiteralMap", ctx, literalMap, identifier, prefix)
	return &DatastoreClient_OffloadTaskExecutionLiteralMap{Call: c_call}
}

func (_m *DatastoreClient) OnOffloadTaskExecutionLiteralMapMatch(matchers ...interface{}) *DatastoreClient_OffloadTaskExecutionLiteralMap {
	c_call := _m.On("OffloadTaskExecutionLiteralMap", matchers...)
	return &DatastoreClient_OffloadTaskExecutionLiteralMap{Call: c_call}
}

// OffloadTaskExecutionLiteralMap provides a mock function with given fields: ctx, literalMap, identifier, prefix
func (_m *DatastoreClient) OffloadTaskExecutionLiteralMap(ctx context.Context, literalMap *core.LiteralMap, identifier *core.TaskExecutionIdentifier, prefix string) (storage.DataReference, error) {
	ret := _m.Called(ctx, literalMap, identifier, prefix)

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context, *core.LiteralMap, *core.TaskExecutionIdentifier, string) storage.DataReference); ok {
		r0 = rf(ctx, literalMap, identifier, prefix)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *core.LiteralMap, *core.TaskExecutionIdentifier, string) error); ok {
		r1 = rf(ctx, literalMap, identifier, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatastoreClient_OffloadWorkflowClosure struct {
	*mock.Call
}

func (_m DatastoreClient_OffloadWorkflowClosure) Return(_a0 storage.DataReference, _a1 error) *DatastoreClient_OffloadWorkflowClosure {
	return &DatastoreClient_OffloadWorkflowClosure{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatastoreClient) OnOffloadWorkflowClosure(ctx context.Context, closure *admin.WorkflowClosure, identifier *core.Identifier) *DatastoreClient_OffloadWorkflowClosure {
	c_call := _m.On("OffloadWorkflowClosure", ctx, closure, identifier)
	return &DatastoreClient_OffloadWorkflowClosure{Call: c_call}
}

func (_m *DatastoreClient) OnOffloadWorkflowClosureMatch(matchers ...interface{}) *DatastoreClient_OffloadWorkflowClosure {
	c_call := _m.On("OffloadWorkflowClosure", matchers...)
	return &DatastoreClient_OffloadWorkflowClosure{Call: c_call}
}

// OffloadWorkflowClosure provides a mock function with given fields: ctx, closure, identifier
func (_m *DatastoreClient) OffloadWorkflowClosure(ctx context.Context, closure *admin.WorkflowClosure, identifier *core.Identifier) (storage.DataReference, error) {
	ret := _m.Called(ctx, closure, identifier)

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func(context.Context, *admin.WorkflowClosure, *core.Identifier) storage.DataReference); ok {
		r0 = rf(ctx, closure, identifier)
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *admin.WorkflowClosure, *core.Identifier) error); ok {
		r1 = rf(ctx, closure, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatastoreClient_ReadProtobuf struct {
	*mock.Call
}

func (_m DatastoreClient_ReadProtobuf) Return(_a0 error) *DatastoreClient_ReadProtobuf {
	return &DatastoreClient_ReadProtobuf{Call: _m.Call.Return(_a0)}
}

func (_m *DatastoreClient) OnReadProtobuf(ctx context.Context, reference storage.DataReference, msg protoiface.MessageV1) *DatastoreClient_ReadProtobuf {
	c_call := _m.On("ReadProtobuf", ctx, reference, msg)
	return &DatastoreClient_ReadProtobuf{Call: c_call}
}

func (_m *DatastoreClient) OnReadProtobufMatch(matchers ...interface{}) *DatastoreClient_ReadProtobuf {
	c_call := _m.On("ReadProtobuf", matchers...)
	return &DatastoreClient_ReadProtobuf{Call: c_call}
}

// ReadProtobuf provides a mock function with given fields: ctx, reference, msg
func (_m *DatastoreClient) ReadProtobuf(ctx context.Context, reference storage.DataReference, msg protoiface.MessageV1) error {
	ret := _m.Called(ctx, reference, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.DataReference, protoiface.MessageV1) error); ok {
		r0 = rf(ctx, reference, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
