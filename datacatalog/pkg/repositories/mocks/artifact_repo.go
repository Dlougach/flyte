// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	datacatalog "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/datacatalog"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/flyte/datacatalog/pkg/repositories/models"
)

// ArtifactRepo is an autogenerated mock type for the ArtifactRepo type
type ArtifactRepo struct {
	mock.Mock
}

type ArtifactRepo_Create struct {
	*mock.Call
}

func (_m ArtifactRepo_Create) Return(_a0 error) *ArtifactRepo_Create {
	return &ArtifactRepo_Create{Call: _m.Call.Return(_a0)}
}

func (_m *ArtifactRepo) OnCreate(ctx context.Context, id *datacatalog.DatasetID, in models.Artifact) *ArtifactRepo_Create {
	c_call := _m.On("Create", ctx, id, in)
	return &ArtifactRepo_Create{Call: c_call}
}

func (_m *ArtifactRepo) OnCreateMatch(matchers ...interface{}) *ArtifactRepo_Create {
	c_call := _m.On("Create", matchers...)
	return &ArtifactRepo_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, id, in
func (_m *ArtifactRepo) Create(ctx context.Context, id *datacatalog.DatasetID, in models.Artifact) error {
	ret := _m.Called(ctx, id, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.DatasetID, models.Artifact) error); ok {
		r0 = rf(ctx, id, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ArtifactRepo_Get struct {
	*mock.Call
}

func (_m ArtifactRepo_Get) Return(_a0 models.Artifact, _a1 error) *ArtifactRepo_Get {
	return &ArtifactRepo_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ArtifactRepo) OnGet(ctx context.Context, id *datacatalog.DatasetID, artifactID string) *ArtifactRepo_Get {
	c_call := _m.On("Get", ctx, id, artifactID)
	return &ArtifactRepo_Get{Call: c_call}
}

func (_m *ArtifactRepo) OnGetMatch(matchers ...interface{}) *ArtifactRepo_Get {
	c_call := _m.On("Get", matchers...)
	return &ArtifactRepo_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, id, artifactID
func (_m *ArtifactRepo) Get(ctx context.Context, id *datacatalog.DatasetID, artifactID string) (models.Artifact, error) {
	ret := _m.Called(ctx, id, artifactID)

	var r0 models.Artifact
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.DatasetID, string) models.Artifact); ok {
		r0 = rf(ctx, id, artifactID)
	} else {
		r0 = ret.Get(0).(models.Artifact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.DatasetID, string) error); ok {
		r1 = rf(ctx, id, artifactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ArtifactRepo_List struct {
	*mock.Call
}

func (_m ArtifactRepo_List) Return(_a0 []models.Artifact, _a1 error) *ArtifactRepo_List {
	return &ArtifactRepo_List{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ArtifactRepo) OnList(ctx context.Context, id *datacatalog.DatasetID, in models.ListModelsInput) *ArtifactRepo_List {
	c_call := _m.On("List", ctx, id, in)
	return &ArtifactRepo_List{Call: c_call}
}

func (_m *ArtifactRepo) OnListMatch(matchers ...interface{}) *ArtifactRepo_List {
	c_call := _m.On("List", matchers...)
	return &ArtifactRepo_List{Call: c_call}
}

// List provides a mock function with given fields: ctx, id, in
func (_m *ArtifactRepo) List(ctx context.Context, id *datacatalog.DatasetID, in models.ListModelsInput) ([]models.Artifact, error) {
	ret := _m.Called(ctx, id, in)

	var r0 []models.Artifact
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.DatasetID, models.ListModelsInput) []models.Artifact); ok {
		r0 = rf(ctx, id, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Artifact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.DatasetID, models.ListModelsInput) error); ok {
		r1 = rf(ctx, id, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ArtifactRepo_Update struct {
	*mock.Call
}

func (_m ArtifactRepo_Update) Return(_a0 error) *ArtifactRepo_Update {
	return &ArtifactRepo_Update{Call: _m.Call.Return(_a0)}
}

func (_m *ArtifactRepo) OnUpdate(ctx context.Context, id *datacatalog.DatasetID, artifact models.Artifact) *ArtifactRepo_Update {
	c_call := _m.On("Update", ctx, id, artifact)
	return &ArtifactRepo_Update{Call: c_call}
}

func (_m *ArtifactRepo) OnUpdateMatch(matchers ...interface{}) *ArtifactRepo_Update {
	c_call := _m.On("Update", matchers...)
	return &ArtifactRepo_Update{Call: c_call}
}

// Update provides a mock function with given fields: ctx, id, artifact
func (_m *ArtifactRepo) Update(ctx context.Context, id *datacatalog.DatasetID, artifact models.Artifact) error {
	ret := _m.Called(ctx, id, artifact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.DatasetID, models.Artifact) error); ok {
		r0 = rf(ctx, id, artifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
