// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	mock "github.com/stretchr/testify/mock"
)

// ConnectionManager is an autogenerated mock type for the ConnectionManager type
type ConnectionManager struct {
	mock.Mock
}

type ConnectionManager_Get struct {
	*mock.Call
}

func (_m ConnectionManager_Get) Return(_a0 core.Connection, _a1 error) *ConnectionManager_Get {
	return &ConnectionManager_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ConnectionManager) OnGet(ctx context.Context, key string) *ConnectionManager_Get {
	c_call := _m.On("Get", ctx, key)
	return &ConnectionManager_Get{Call: c_call}
}

func (_m *ConnectionManager) OnGetMatch(matchers ...interface{}) *ConnectionManager_Get {
	c_call := _m.On("Get", matchers...)
	return &ConnectionManager_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, key
func (_m *ConnectionManager) Get(ctx context.Context, key string) (core.Connection, error) {
	ret := _m.Called(ctx, key)

	var r0 core.Connection
	if rf, ok := ret.Get(0).(func(context.Context, string) core.Connection); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(core.Connection)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
