// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/admin/override_attributes.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ClusterResourceAttributes, ExecutionClusterLabel, ExecutionQueueAttributes, PluginOverrides, TaskResourceAttributes, WorkflowExecutionConfig } from "./matchable_resource_pb.js";
import { QualityOfService } from "../core/execution_pb.js";
import { ClusterAssignment } from "./cluster_assignment_pb.js";

/**
 * @generated from message flyteidl.admin.projectID
 */
export class projectID extends Message<projectID> {
  /**
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: string org = 3;
   */
  org = "";

  constructor(data?: PartialMessage<projectID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.projectID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): projectID {
    return new projectID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): projectID {
    return new projectID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): projectID {
    return new projectID().fromJsonString(jsonString, options);
  }

  static equals(a: projectID | PlainMessage<projectID> | undefined, b: projectID | PlainMessage<projectID> | undefined): boolean {
    return proto3.util.equals(projectID, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.Attributes
 */
export class Attributes extends Message<Attributes> {
  /**
   * @generated from field: flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
   */
  taskResourceAttributes?: TaskResourceAttributes;

  /**
   * @generated from field: flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
   */
  clusterResourceAttributes?: ClusterResourceAttributes;

  /**
   * @generated from field: flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
   */
  executionQueueAttributes?: ExecutionQueueAttributes;

  /**
   * @generated from field: flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4;
   */
  executionClusterLabel?: ExecutionClusterLabel;

  /**
   * @generated from field: flyteidl.core.QualityOfService quality_of_service = 5;
   */
  qualityOfService?: QualityOfService;

  /**
   * @generated from field: flyteidl.admin.PluginOverrides plugin_overrides = 6;
   */
  pluginOverrides?: PluginOverrides;

  /**
   * @generated from field: flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7;
   */
  workflowExecutionConfig?: WorkflowExecutionConfig;

  /**
   * @generated from field: flyteidl.admin.ClusterAssignment cluster_assignment = 8;
   */
  clusterAssignment?: ClusterAssignment;

  constructor(data?: PartialMessage<Attributes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.Attributes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_resource_attributes", kind: "message", T: TaskResourceAttributes },
    { no: 2, name: "cluster_resource_attributes", kind: "message", T: ClusterResourceAttributes },
    { no: 3, name: "execution_queue_attributes", kind: "message", T: ExecutionQueueAttributes },
    { no: 4, name: "execution_cluster_label", kind: "message", T: ExecutionClusterLabel },
    { no: 5, name: "quality_of_service", kind: "message", T: QualityOfService },
    { no: 6, name: "plugin_overrides", kind: "message", T: PluginOverrides },
    { no: 7, name: "workflow_execution_config", kind: "message", T: WorkflowExecutionConfig },
    { no: 8, name: "cluster_assignment", kind: "message", T: ClusterAssignment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attributes {
    return new Attributes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attributes {
    return new Attributes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attributes {
    return new Attributes().fromJsonString(jsonString, options);
  }

  static equals(a: Attributes | PlainMessage<Attributes> | undefined, b: Attributes | PlainMessage<Attributes> | undefined): boolean {
    return proto3.util.equals(Attributes, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.OverrideAttributesGetRequest
 */
export class OverrideAttributesGetRequest extends Message<OverrideAttributesGetRequest> {
  /**
   * @generated from field: flyteidl.admin.projectID id = 1;
   */
  id?: projectID;

  constructor(data?: PartialMessage<OverrideAttributesGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OverrideAttributesGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: projectID },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverrideAttributesGetRequest {
    return new OverrideAttributesGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverrideAttributesGetRequest {
    return new OverrideAttributesGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverrideAttributesGetRequest {
    return new OverrideAttributesGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OverrideAttributesGetRequest | PlainMessage<OverrideAttributesGetRequest> | undefined, b: OverrideAttributesGetRequest | PlainMessage<OverrideAttributesGetRequest> | undefined): boolean {
    return proto3.util.equals(OverrideAttributesGetRequest, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.OverrideAttributesGetResponse
 */
export class OverrideAttributesGetResponse extends Message<OverrideAttributesGetResponse> {
  /**
   * @generated from field: flyteidl.admin.projectID id = 1;
   */
  id?: projectID;

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * Everything set at the project-domain level
   *
   * @generated from field: flyteidl.admin.Attributes project_domain_attributes = 3;
   */
  projectDomainAttributes?: Attributes;

  /**
   * Everything set at the project level
   *
   * @generated from field: flyteidl.admin.Attributes project_attributes = 4;
   */
  projectAttributes?: Attributes;

  /**
   * Everything set at the global application level
   *
   * @generated from field: flyteidl.admin.Attributes global_attributes = 5;
   */
  globalAttributes?: Attributes;

  constructor(data?: PartialMessage<OverrideAttributesGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OverrideAttributesGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: projectID },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_domain_attributes", kind: "message", T: Attributes },
    { no: 4, name: "project_attributes", kind: "message", T: Attributes },
    { no: 5, name: "global_attributes", kind: "message", T: Attributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverrideAttributesGetResponse {
    return new OverrideAttributesGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverrideAttributesGetResponse {
    return new OverrideAttributesGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverrideAttributesGetResponse {
    return new OverrideAttributesGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OverrideAttributesGetResponse | PlainMessage<OverrideAttributesGetResponse> | undefined, b: OverrideAttributesGetResponse | PlainMessage<OverrideAttributesGetResponse> | undefined): boolean {
    return proto3.util.equals(OverrideAttributesGetResponse, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.OverrideAttributesUpdateRequest
 */
export class OverrideAttributesUpdateRequest extends Message<OverrideAttributesUpdateRequest> {
  /**
   * @generated from field: flyteidl.admin.projectID id = 1;
   */
  id?: projectID;

  /**
   * Everything set at the project-domain level
   *
   * @generated from field: flyteidl.admin.Attributes attribute = 2;
   */
  attribute?: Attributes;

  constructor(data?: PartialMessage<OverrideAttributesUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OverrideAttributesUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: projectID },
    { no: 2, name: "attribute", kind: "message", T: Attributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverrideAttributesUpdateRequest {
    return new OverrideAttributesUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverrideAttributesUpdateRequest {
    return new OverrideAttributesUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverrideAttributesUpdateRequest {
    return new OverrideAttributesUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OverrideAttributesUpdateRequest | PlainMessage<OverrideAttributesUpdateRequest> | undefined, b: OverrideAttributesUpdateRequest | PlainMessage<OverrideAttributesUpdateRequest> | undefined): boolean {
    return proto3.util.equals(OverrideAttributesUpdateRequest, a, b);
  }
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.OverrideAttributesUpdateResponse
 */
export class OverrideAttributesUpdateResponse extends Message<OverrideAttributesUpdateResponse> {
  constructor(data?: PartialMessage<OverrideAttributesUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OverrideAttributesUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OverrideAttributesUpdateResponse {
    return new OverrideAttributesUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OverrideAttributesUpdateResponse {
    return new OverrideAttributesUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OverrideAttributesUpdateResponse {
    return new OverrideAttributesUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OverrideAttributesUpdateResponse | PlainMessage<OverrideAttributesUpdateResponse> | undefined, b: OverrideAttributesUpdateResponse | PlainMessage<OverrideAttributesUpdateResponse> | undefined): boolean {
    return proto3.util.equals(OverrideAttributesUpdateResponse, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.Document
 */
export class Document extends Message<Document> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: map<string, flyteidl.admin.OrgDocument> org_documents = 2;
   */
  orgDocuments: { [key: string]: OrgDocument } = {};

  constructor(data?: PartialMessage<Document>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.Document";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "org_documents", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: OrgDocument} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Document {
    return new Document().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Document {
    return new Document().fromJsonString(jsonString, options);
  }

  static equals(a: Document | PlainMessage<Document> | undefined, b: Document | PlainMessage<Document> | undefined): boolean {
    return proto3.util.equals(Document, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.OrgDocument
 */
export class OrgDocument extends Message<OrgDocument> {
  /**
   * @generated from field: map<string, flyteidl.admin.ProjectDocument> project_documents = 1;
   */
  projectDocuments: { [key: string]: ProjectDocument } = {};

  constructor(data?: PartialMessage<OrgDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.OrgDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_documents", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ProjectDocument} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgDocument {
    return new OrgDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgDocument {
    return new OrgDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgDocument {
    return new OrgDocument().fromJsonString(jsonString, options);
  }

  static equals(a: OrgDocument | PlainMessage<OrgDocument> | undefined, b: OrgDocument | PlainMessage<OrgDocument> | undefined): boolean {
    return proto3.util.equals(OrgDocument, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.ProjectDocument
 */
export class ProjectDocument extends Message<ProjectDocument> {
  /**
   * @generated from field: map<string, flyteidl.admin.ProjectDomainDocument> project_domain_documents = 1;
   */
  projectDomainDocuments: { [key: string]: ProjectDomainDocument } = {};

  constructor(data?: PartialMessage<ProjectDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ProjectDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_domain_documents", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ProjectDomainDocument} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectDocument {
    return new ProjectDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectDocument {
    return new ProjectDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectDocument {
    return new ProjectDocument().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectDocument | PlainMessage<ProjectDocument> | undefined, b: ProjectDocument | PlainMessage<ProjectDocument> | undefined): boolean {
    return proto3.util.equals(ProjectDocument, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.ProjectDomainDocument
 */
export class ProjectDomainDocument extends Message<ProjectDomainDocument> {
  /**
   * @generated from field: map<string, flyteidl.admin.WorkflowDocument> workflow_documents = 1;
   */
  workflowDocuments: { [key: string]: WorkflowDocument } = {};

  constructor(data?: PartialMessage<ProjectDomainDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ProjectDomainDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_documents", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: WorkflowDocument} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectDomainDocument {
    return new ProjectDomainDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectDomainDocument {
    return new ProjectDomainDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectDomainDocument {
    return new ProjectDomainDocument().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectDomainDocument | PlainMessage<ProjectDomainDocument> | undefined, b: ProjectDomainDocument | PlainMessage<ProjectDomainDocument> | undefined): boolean {
    return proto3.util.equals(ProjectDomainDocument, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.WorkflowDocument
 */
export class WorkflowDocument extends Message<WorkflowDocument> {
  /**
   * @generated from field: map<string, flyteidl.admin.LaunchPlanDocument> launch_plan_documents = 1;
   */
  launchPlanDocuments: { [key: string]: LaunchPlanDocument } = {};

  constructor(data?: PartialMessage<WorkflowDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.WorkflowDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "launch_plan_documents", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: LaunchPlanDocument} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowDocument {
    return new WorkflowDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowDocument {
    return new WorkflowDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowDocument {
    return new WorkflowDocument().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowDocument | PlainMessage<WorkflowDocument> | undefined, b: WorkflowDocument | PlainMessage<WorkflowDocument> | undefined): boolean {
    return proto3.util.equals(WorkflowDocument, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.LaunchPlanDocument
 */
export class LaunchPlanDocument extends Message<LaunchPlanDocument> {
  /**
   * @generated from field: flyteidl.admin.Attributes attributes = 1;
   */
  attributes?: Attributes;

  constructor(data?: PartialMessage<LaunchPlanDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.LaunchPlanDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributes", kind: "message", T: Attributes },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LaunchPlanDocument {
    return new LaunchPlanDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LaunchPlanDocument {
    return new LaunchPlanDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LaunchPlanDocument {
    return new LaunchPlanDocument().fromJsonString(jsonString, options);
  }

  static equals(a: LaunchPlanDocument | PlainMessage<LaunchPlanDocument> | undefined, b: LaunchPlanDocument | PlainMessage<LaunchPlanDocument> | undefined): boolean {
    return proto3.util.equals(LaunchPlanDocument, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.DocumentID
 */
export class DocumentID extends Message<DocumentID> {
  /**
   * @generated from field: string org = 1;
   */
  org = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * @generated from field: string workflow = 4;
   */
  workflow = "";

  /**
   * @generated from field: string launch_plan = 5;
   */
  launchPlan = "";

  constructor(data?: PartialMessage<DocumentID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.DocumentID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "launch_plan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DocumentID {
    return new DocumentID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DocumentID {
    return new DocumentID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DocumentID {
    return new DocumentID().fromJsonString(jsonString, options);
  }

  static equals(a: DocumentID | PlainMessage<DocumentID> | undefined, b: DocumentID | PlainMessage<DocumentID> | undefined): boolean {
    return proto3.util.equals(DocumentID, a, b);
  }
}

