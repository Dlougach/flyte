// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file flyteidl/admin/configuration.proto (package flyteidl.admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ClusterResourceAttributes, ExecutionClusterLabel, ExecutionQueueAttributes, PluginOverrides, TaskResourceAttributes, WorkflowExecutionConfig } from "./matchable_resource_pb.js";
import { QualityOfService } from "../core/execution_pb.js";
import { ClusterAssignment } from "./cluster_assignment_pb.js";

/**
 * @generated from message flyteidl.admin.configurationID
 */
export class configurationID extends Message<configurationID> {
  /**
   * @generated from field: string project = 1;
   */
  project = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: string workflow = 3;
   */
  workflow = "";

  /**
   * @generated from field: string org = 4;
   */
  org = "";

  constructor(data?: PartialMessage<configurationID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.configurationID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "workflow", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): configurationID {
    return new configurationID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): configurationID {
    return new configurationID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): configurationID {
    return new configurationID().fromJsonString(jsonString, options);
  }

  static equals(a: configurationID | PlainMessage<configurationID> | undefined, b: configurationID | PlainMessage<configurationID> | undefined): boolean {
    return proto3.util.equals(configurationID, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.Configuration
 */
export class Configuration extends Message<Configuration> {
  /**
   * @generated from field: flyteidl.admin.TaskResourceAttributes task_resource_attributes = 1;
   */
  taskResourceAttributes?: TaskResourceAttributes;

  /**
   * @generated from field: flyteidl.admin.ClusterResourceAttributes cluster_resource_attributes = 2;
   */
  clusterResourceAttributes?: ClusterResourceAttributes;

  /**
   * @generated from field: flyteidl.admin.ExecutionQueueAttributes execution_queue_attributes = 3;
   */
  executionQueueAttributes?: ExecutionQueueAttributes;

  /**
   * @generated from field: flyteidl.admin.ExecutionClusterLabel execution_cluster_label = 4;
   */
  executionClusterLabel?: ExecutionClusterLabel;

  /**
   * @generated from field: flyteidl.core.QualityOfService quality_of_service = 5;
   */
  qualityOfService?: QualityOfService;

  /**
   * @generated from field: flyteidl.admin.PluginOverrides plugin_overrides = 6;
   */
  pluginOverrides?: PluginOverrides;

  /**
   * @generated from field: flyteidl.admin.WorkflowExecutionConfig workflow_execution_config = 7;
   */
  workflowExecutionConfig?: WorkflowExecutionConfig;

  /**
   * @generated from field: flyteidl.admin.ClusterAssignment cluster_assignment = 8;
   */
  clusterAssignment?: ClusterAssignment;

  constructor(data?: PartialMessage<Configuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.Configuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "task_resource_attributes", kind: "message", T: TaskResourceAttributes },
    { no: 2, name: "cluster_resource_attributes", kind: "message", T: ClusterResourceAttributes },
    { no: 3, name: "execution_queue_attributes", kind: "message", T: ExecutionQueueAttributes },
    { no: 4, name: "execution_cluster_label", kind: "message", T: ExecutionClusterLabel },
    { no: 5, name: "quality_of_service", kind: "message", T: QualityOfService },
    { no: 6, name: "plugin_overrides", kind: "message", T: PluginOverrides },
    { no: 7, name: "workflow_execution_config", kind: "message", T: WorkflowExecutionConfig },
    { no: 8, name: "cluster_assignment", kind: "message", T: ClusterAssignment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Configuration {
    return new Configuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Configuration {
    return new Configuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Configuration {
    return new Configuration().fromJsonString(jsonString, options);
  }

  static equals(a: Configuration | PlainMessage<Configuration> | undefined, b: Configuration | PlainMessage<Configuration> | undefined): boolean {
    return proto3.util.equals(Configuration, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.ConfigurationGetRequest
 */
export class ConfigurationGetRequest extends Message<ConfigurationGetRequest> {
  /**
   * @generated from field: flyteidl.admin.configurationID id = 1;
   */
  id?: configurationID;

  constructor(data?: PartialMessage<ConfigurationGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ConfigurationGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: configurationID },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigurationGetRequest {
    return new ConfigurationGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigurationGetRequest {
    return new ConfigurationGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigurationGetRequest {
    return new ConfigurationGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigurationGetRequest | PlainMessage<ConfigurationGetRequest> | undefined, b: ConfigurationGetRequest | PlainMessage<ConfigurationGetRequest> | undefined): boolean {
    return proto3.util.equals(ConfigurationGetRequest, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.ConfigurationGetResponse
 */
export class ConfigurationGetResponse extends Message<ConfigurationGetResponse> {
  /**
   * @generated from field: flyteidl.admin.configurationID id = 1;
   */
  id?: configurationID;

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * Everything set at the project-domain level
   *
   * @generated from field: flyteidl.admin.Configuration project_domain_configuration = 3;
   */
  projectDomainConfiguration?: Configuration;

  /**
   * Everything set at the project level
   *
   * @generated from field: flyteidl.admin.Configuration project_configuration = 4;
   */
  projectConfiguration?: Configuration;

  /**
   * Everything set at the global application level
   *
   * @generated from field: flyteidl.admin.Configuration global_configuration = 5;
   */
  globalConfiguration?: Configuration;

  constructor(data?: PartialMessage<ConfigurationGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ConfigurationGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: configurationID },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project_domain_configuration", kind: "message", T: Configuration },
    { no: 4, name: "project_configuration", kind: "message", T: Configuration },
    { no: 5, name: "global_configuration", kind: "message", T: Configuration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigurationGetResponse {
    return new ConfigurationGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigurationGetResponse {
    return new ConfigurationGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigurationGetResponse {
    return new ConfigurationGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigurationGetResponse | PlainMessage<ConfigurationGetResponse> | undefined, b: ConfigurationGetResponse | PlainMessage<ConfigurationGetResponse> | undefined): boolean {
    return proto3.util.equals(ConfigurationGetResponse, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.ConfigurationUpdateRequest
 */
export class ConfigurationUpdateRequest extends Message<ConfigurationUpdateRequest> {
  /**
   * @generated from field: flyteidl.admin.configurationID id = 1;
   */
  id?: configurationID;

  /**
   * +optional
   *
   * @generated from field: string version_to_update = 2;
   */
  versionToUpdate = "";

  /**
   * Everything set at the project-domain level
   *
   * @generated from field: flyteidl.admin.Configuration configuration = 3;
   */
  configuration?: Configuration;

  constructor(data?: PartialMessage<ConfigurationUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ConfigurationUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: configurationID },
    { no: 2, name: "version_to_update", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "configuration", kind: "message", T: Configuration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigurationUpdateRequest {
    return new ConfigurationUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigurationUpdateRequest {
    return new ConfigurationUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigurationUpdateRequest {
    return new ConfigurationUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigurationUpdateRequest | PlainMessage<ConfigurationUpdateRequest> | undefined, b: ConfigurationUpdateRequest | PlainMessage<ConfigurationUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ConfigurationUpdateRequest, a, b);
  }
}

/**
 * Purposefully empty, may be populated in the future.
 *
 * @generated from message flyteidl.admin.ConfigurationUpdateResponse
 */
export class ConfigurationUpdateResponse extends Message<ConfigurationUpdateResponse> {
  constructor(data?: PartialMessage<ConfigurationUpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ConfigurationUpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigurationUpdateResponse {
    return new ConfigurationUpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigurationUpdateResponse {
    return new ConfigurationUpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigurationUpdateResponse {
    return new ConfigurationUpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigurationUpdateResponse | PlainMessage<ConfigurationUpdateResponse> | undefined, b: ConfigurationUpdateResponse | PlainMessage<ConfigurationUpdateResponse> | undefined): boolean {
    return proto3.util.equals(ConfigurationUpdateResponse, a, b);
  }
}

/**
 * @generated from message flyteidl.admin.ConfigurationDocument
 */
export class ConfigurationDocument extends Message<ConfigurationDocument> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: map<string, flyteidl.admin.Configuration> configurations = 3;
   */
  configurations: { [key: string]: Configuration } = {};

  constructor(data?: PartialMessage<ConfigurationDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "flyteidl.admin.ConfigurationDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "configurations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Configuration} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigurationDocument {
    return new ConfigurationDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigurationDocument {
    return new ConfigurationDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigurationDocument {
    return new ConfigurationDocument().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigurationDocument | PlainMessage<ConfigurationDocument> | undefined, b: ConfigurationDocument | PlainMessage<ConfigurationDocument> | undefined): boolean {
    return proto3.util.equals(ConfigurationDocument, a, b);
  }
}

