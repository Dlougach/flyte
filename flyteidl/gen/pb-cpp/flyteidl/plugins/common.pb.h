// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/common.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fplugins_2fcommon_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fplugins_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/tasks.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fcommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fcommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fplugins_2fcommon_2eproto();
namespace flyteidl {
namespace plugins {
class RoleSpec;
class RoleSpecDefaultTypeInternal;
extern RoleSpecDefaultTypeInternal _RoleSpec_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::plugins::RoleSpec* Arena::CreateMaybeMessage<::flyteidl::plugins::RoleSpec>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace plugins {

// ===================================================================

class RoleSpec final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.RoleSpec) */ {
 public:
  RoleSpec();
  virtual ~RoleSpec();

  RoleSpec(const RoleSpec& from);

  inline RoleSpec& operator=(const RoleSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoleSpec(RoleSpec&& from) noexcept
    : RoleSpec() {
    *this = ::std::move(from);
  }

  inline RoleSpec& operator=(RoleSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RoleSpec& default_instance();

  enum PodValueCase {
    kPod = 1,
    POD_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleSpec* internal_default_instance() {
    return reinterpret_cast<const RoleSpec*>(
               &_RoleSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RoleSpec* other);
  friend void swap(RoleSpec& a, RoleSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoleSpec* New() const final {
    return CreateMaybeMessage<RoleSpec>(nullptr);
  }

  RoleSpec* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoleSpec>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoleSpec& from);
  void MergeFrom(const RoleSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pod_template_name = 2;
  void clear_pod_template_name();
  static const int kPodTemplateNameFieldNumber = 2;
  const ::std::string& pod_template_name() const;
  void set_pod_template_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pod_template_name(::std::string&& value);
  #endif
  void set_pod_template_name(const char* value);
  void set_pod_template_name(const char* value, size_t size);
  ::std::string* mutable_pod_template_name();
  ::std::string* release_pod_template_name();
  void set_allocated_pod_template_name(::std::string* pod_template_name);

  // .flyteidl.core.K8sPod pod = 1;
  bool has_pod() const;
  void clear_pod();
  static const int kPodFieldNumber = 1;
  const ::flyteidl::core::K8sPod& pod() const;
  ::flyteidl::core::K8sPod* release_pod();
  ::flyteidl::core::K8sPod* mutable_pod();
  void set_allocated_pod(::flyteidl::core::K8sPod* pod);

  void clear_pod_value();
  PodValueCase pod_value_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.plugins.RoleSpec)
 private:
  class HasBitSetters;
  void set_has_pod();

  inline bool has_pod_value() const;
  inline void clear_has_pod_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pod_template_name_;
  union PodValueUnion {
    PodValueUnion() {}
    ::flyteidl::core::K8sPod* pod_;
  } pod_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fplugins_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoleSpec

// .flyteidl.core.K8sPod pod = 1;
inline bool RoleSpec::has_pod() const {
  return pod_value_case() == kPod;
}
inline void RoleSpec::set_has_pod() {
  _oneof_case_[0] = kPod;
}
inline ::flyteidl::core::K8sPod* RoleSpec::release_pod() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.RoleSpec.pod)
  if (has_pod()) {
    clear_has_pod_value();
      ::flyteidl::core::K8sPod* temp = pod_value_.pod_;
    pod_value_.pod_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::K8sPod& RoleSpec::pod() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.RoleSpec.pod)
  return has_pod()
      ? *pod_value_.pod_
      : *reinterpret_cast< ::flyteidl::core::K8sPod*>(&::flyteidl::core::_K8sPod_default_instance_);
}
inline ::flyteidl::core::K8sPod* RoleSpec::mutable_pod() {
  if (!has_pod()) {
    clear_pod_value();
    set_has_pod();
    pod_value_.pod_ = CreateMaybeMessage< ::flyteidl::core::K8sPod >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.RoleSpec.pod)
  return pod_value_.pod_;
}

// string pod_template_name = 2;
inline void RoleSpec::clear_pod_template_name() {
  pod_template_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoleSpec::pod_template_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.RoleSpec.pod_template_name)
  return pod_template_name_.GetNoArena();
}
inline void RoleSpec::set_pod_template_name(const ::std::string& value) {
  
  pod_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.RoleSpec.pod_template_name)
}
#if LANG_CXX11
inline void RoleSpec::set_pod_template_name(::std::string&& value) {
  
  pod_template_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.plugins.RoleSpec.pod_template_name)
}
#endif
inline void RoleSpec::set_pod_template_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pod_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.RoleSpec.pod_template_name)
}
inline void RoleSpec::set_pod_template_name(const char* value, size_t size) {
  
  pod_template_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.RoleSpec.pod_template_name)
}
inline ::std::string* RoleSpec::mutable_pod_template_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.RoleSpec.pod_template_name)
  return pod_template_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoleSpec::release_pod_template_name() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.RoleSpec.pod_template_name)
  
  return pod_template_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoleSpec::set_allocated_pod_template_name(::std::string* pod_template_name) {
  if (pod_template_name != nullptr) {
    
  } else {
    
  }
  pod_template_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pod_template_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.plugins.RoleSpec.pod_template_name)
}

inline bool RoleSpec::has_pod_value() const {
  return pod_value_case() != POD_VALUE_NOT_SET;
}
inline void RoleSpec::clear_has_pod_value() {
  _oneof_case_[0] = POD_VALUE_NOT_SET;
}
inline RoleSpec::PodValueCase RoleSpec::pod_value_case() const {
  return RoleSpec::PodValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace plugins
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fplugins_2fcommon_2eproto
