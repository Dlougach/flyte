// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/persistent_envs.proto

#include "flyteidl/core/persistent_envs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fpersistent_5fenvs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fpersistent_5fenvs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Environment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto;
namespace flyteidl {
namespace core {
class EnvironmentAssignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnvironmentAssignment> _instance;
} _EnvironmentAssignment_default_instance_;
class EnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Environment> _instance;
} _Environment_default_instance_;
class FastTaskEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastTaskEnvironment> _instance;
} _FastTaskEnvironment_default_instance_;
}  // namespace core
}  // namespace flyteidl
static void InitDefaultsEnvironmentAssignment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_EnvironmentAssignment_default_instance_;
    new (ptr) ::flyteidl::core::EnvironmentAssignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::EnvironmentAssignment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EnvironmentAssignment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEnvironmentAssignment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto}, {
      &scc_info_Environment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base,}};

static void InitDefaultsEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Environment_default_instance_;
    new (ptr) ::flyteidl::core::Environment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Environment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Environment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto}, {
      &scc_info_FastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base,}};

static void InitDefaultsFastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_FastTaskEnvironment_default_instance_;
    new (ptr) ::flyteidl::core::FastTaskEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::FastTaskEnvironment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto}, {}};

void InitDefaults_flyteidl_2fcore_2fpersistent_5fenvs_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EnvironmentAssignment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Environment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fcore_2fpersistent_5fenvs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::EnvironmentAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::EnvironmentAssignment, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::EnvironmentAssignment, node_ids_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::EnvironmentAssignment, environment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Environment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Environment, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Environment, fasttask_environment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, queue_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, namespace__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, pod_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::EnvironmentAssignment)},
  { 8, -1, sizeof(::flyteidl::core::Environment)},
  { 15, -1, sizeof(::flyteidl::core::FastTaskEnvironment)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_EnvironmentAssignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Environment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_FastTaskEnvironment_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto = {
  {}, AddDescriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto, "flyteidl/core/persistent_envs.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fcore_2fpersistent_5fenvs_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fpersistent_5fenvs_2eproto, 3, file_level_enum_descriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[] =
  "\n#flyteidl/core/persistent_envs.proto\022\rf"
  "lyteidl.core\032\036flyteidl/core/identifier.p"
  "roto\"f\n\025EnvironmentAssignment\022\n\n\002id\030\001 \001("
  "\t\022\020\n\010node_ids\030\002 \003(\t\022/\n\013environment\030\003 \001(\013"
  "2\032.flyteidl.core.Environment\"\252\001\n\013Environ"
  "ment\0228\n\004type\030\001 \001(\0162*.flyteidl.core.Envir"
  "onment.EnvironmentType\022@\n\024fasttask_envir"
  "onment\030\002 \001(\0132\".flyteidl.core.FastTaskEnv"
  "ironment\"\037\n\017EnvironmentType\022\014\n\010FASTTASK\020"
  "\000\"J\n\023FastTaskEnvironment\022\020\n\010queue_id\030\001 \001"
  "(\t\022\021\n\tnamespace\030\002 \001(\t\022\016\n\006pod_id\030\003 \001(\tB<Z"
  ":github.com/flyteorg/flyte/flyteidl/gen/"
  "pb-go/flyteidl/coreb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto = {
  false, InitDefaults_flyteidl_2fcore_2fpersistent_5fenvs_2eproto, 
  descriptor_table_protodef_flyteidl_2fcore_2fpersistent_5fenvs_2eproto,
  "flyteidl/core/persistent_envs.proto", &assign_descriptors_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto, 507,
};

void AddDescriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fcore_2fpersistent_5fenvs_2eproto = []() { AddDescriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto(); return true; }();
namespace flyteidl {
namespace core {
const ::google::protobuf::EnumDescriptor* Environment_EnvironmentType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[0];
}
bool Environment_EnvironmentType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Environment_EnvironmentType Environment::FASTTASK;
const Environment_EnvironmentType Environment::EnvironmentType_MIN;
const Environment_EnvironmentType Environment::EnvironmentType_MAX;
const int Environment::EnvironmentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void EnvironmentAssignment::InitAsDefaultInstance() {
  ::flyteidl::core::_EnvironmentAssignment_default_instance_._instance.get_mutable()->environment_ = const_cast< ::flyteidl::core::Environment*>(
      ::flyteidl::core::Environment::internal_default_instance());
}
class EnvironmentAssignment::HasBitSetters {
 public:
  static const ::flyteidl::core::Environment& environment(const EnvironmentAssignment* msg);
};

const ::flyteidl::core::Environment&
EnvironmentAssignment::HasBitSetters::environment(const EnvironmentAssignment* msg) {
  return *msg->environment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnvironmentAssignment::kIdFieldNumber;
const int EnvironmentAssignment::kNodeIdsFieldNumber;
const int EnvironmentAssignment::kEnvironmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnvironmentAssignment::EnvironmentAssignment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.EnvironmentAssignment)
}
EnvironmentAssignment::EnvironmentAssignment(const EnvironmentAssignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      node_ids_(from.node_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_environment()) {
    environment_ = new ::flyteidl::core::Environment(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.EnvironmentAssignment)
}

void EnvironmentAssignment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EnvironmentAssignment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  environment_ = nullptr;
}

EnvironmentAssignment::~EnvironmentAssignment() {
  // @@protoc_insertion_point(destructor:flyteidl.core.EnvironmentAssignment)
  SharedDtor();
}

void EnvironmentAssignment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete environment_;
}

void EnvironmentAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentAssignment& EnvironmentAssignment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EnvironmentAssignment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.EnvironmentAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_ids_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentAssignment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EnvironmentAssignment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.EnvironmentAssignment.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string node_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.core.EnvironmentAssignment.node_ids");
          object = msg->add_node_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .flyteidl.core.Environment environment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Environment::_InternalParse;
        object = msg->mutable_environment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.EnvironmentAssignment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.EnvironmentAssignment.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string node_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_ids(this->node_ids_size() - 1).data(),
            static_cast<int>(this->node_ids(this->node_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.EnvironmentAssignment.node_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.Environment environment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.EnvironmentAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.EnvironmentAssignment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.EnvironmentAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.EnvironmentAssignment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string node_ids = 2;
  for (int i = 0, n = this->node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ids(i).data(), static_cast<int>(this->node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.EnvironmentAssignment.node_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_ids(i), output);
  }

  // .flyteidl.core.Environment environment = 3;
  if (this->has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::environment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.EnvironmentAssignment)
}

::google::protobuf::uint8* EnvironmentAssignment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.EnvironmentAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.EnvironmentAssignment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string node_ids = 2;
  for (int i = 0, n = this->node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ids(i).data(), static_cast<int>(this->node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.EnvironmentAssignment.node_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->node_ids(i), target);
  }

  // .flyteidl.core.Environment environment = 3;
  if (this->has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::environment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.EnvironmentAssignment)
  return target;
}

size_t EnvironmentAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.EnvironmentAssignment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string node_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_ids_size());
  for (int i = 0, n = this->node_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_ids(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .flyteidl.core.Environment environment = 3;
  if (this->has_environment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *environment_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentAssignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.EnvironmentAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentAssignment* source =
      ::google::protobuf::DynamicCastToGenerated<EnvironmentAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.EnvironmentAssignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.EnvironmentAssignment)
    MergeFrom(*source);
  }
}

void EnvironmentAssignment::MergeFrom(const EnvironmentAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.EnvironmentAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_ids_.MergeFrom(from.node_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_environment()) {
    mutable_environment()->::flyteidl::core::Environment::MergeFrom(from.environment());
  }
}

void EnvironmentAssignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.EnvironmentAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentAssignment::CopyFrom(const EnvironmentAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.EnvironmentAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentAssignment::IsInitialized() const {
  return true;
}

void EnvironmentAssignment::Swap(EnvironmentAssignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnvironmentAssignment::InternalSwap(EnvironmentAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_ids_.InternalSwap(CastToBase(&other->node_ids_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(environment_, other->environment_);
}

::google::protobuf::Metadata EnvironmentAssignment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Environment::InitAsDefaultInstance() {
  ::flyteidl::core::_Environment_default_instance_._instance.get_mutable()->fasttask_environment_ = const_cast< ::flyteidl::core::FastTaskEnvironment*>(
      ::flyteidl::core::FastTaskEnvironment::internal_default_instance());
}
class Environment::HasBitSetters {
 public:
  static const ::flyteidl::core::FastTaskEnvironment& fasttask_environment(const Environment* msg);
};

const ::flyteidl::core::FastTaskEnvironment&
Environment::HasBitSetters::fasttask_environment(const Environment* msg) {
  return *msg->fasttask_environment_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Environment::kTypeFieldNumber;
const int Environment::kFasttaskEnvironmentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Environment::Environment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Environment)
}
Environment::Environment(const Environment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fasttask_environment()) {
    fasttask_environment_ = new ::flyteidl::core::FastTaskEnvironment(*from.fasttask_environment_);
  } else {
    fasttask_environment_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Environment)
}

void Environment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Environment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  ::memset(&fasttask_environment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fasttask_environment_)) + sizeof(type_));
}

Environment::~Environment() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Environment)
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != internal_default_instance()) delete fasttask_environment_;
}

void Environment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Environment& Environment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Environment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void Environment::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fasttask_environment_ != nullptr) {
    delete fasttask_environment_;
  }
  fasttask_environment_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Environment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Environment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Environment.EnvironmentType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::flyteidl::core::Environment_EnvironmentType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.FastTaskEnvironment fasttask_environment = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::FastTaskEnvironment::_InternalParse;
        object = msg->mutable_fasttask_environment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Environment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Environment.EnvironmentType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::flyteidl::core::Environment_EnvironmentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.FastTaskEnvironment fasttask_environment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fasttask_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Environment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Environment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Environment.EnvironmentType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .flyteidl.core.FastTaskEnvironment fasttask_environment = 2;
  if (this->has_fasttask_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fasttask_environment(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Environment)
}

::google::protobuf::uint8* Environment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Environment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Environment.EnvironmentType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .flyteidl.core.FastTaskEnvironment fasttask_environment = 2;
  if (this->has_fasttask_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fasttask_environment(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Environment)
  return target;
}

size_t Environment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Environment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.FastTaskEnvironment fasttask_environment = 2;
  if (this->has_fasttask_environment()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fasttask_environment_);
  }

  // .flyteidl.core.Environment.EnvironmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  const Environment* source =
      ::google::protobuf::DynamicCastToGenerated<Environment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Environment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Environment)
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Environment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fasttask_environment()) {
    mutable_fasttask_environment()->::flyteidl::core::FastTaskEnvironment::MergeFrom(from.fasttask_environment());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Environment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  return true;
}

void Environment::Swap(Environment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Environment::InternalSwap(Environment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fasttask_environment_, other->fasttask_environment_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FastTaskEnvironment::InitAsDefaultInstance() {
}
class FastTaskEnvironment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastTaskEnvironment::kQueueIdFieldNumber;
const int FastTaskEnvironment::kNamespaceFieldNumber;
const int FastTaskEnvironment::kPodIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastTaskEnvironment::FastTaskEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.FastTaskEnvironment)
}
FastTaskEnvironment::FastTaskEnvironment(const FastTaskEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_id().size() > 0) {
    queue_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_id_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  pod_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pod_id().size() > 0) {
    pod_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_id_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.FastTaskEnvironment)
}

void FastTaskEnvironment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  queue_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FastTaskEnvironment::~FastTaskEnvironment() {
  // @@protoc_insertion_point(destructor:flyteidl.core.FastTaskEnvironment)
  SharedDtor();
}

void FastTaskEnvironment::SharedDtor() {
  queue_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FastTaskEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastTaskEnvironment& FastTaskEnvironment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FastTaskEnvironment_flyteidl_2fcore_2fpersistent_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void FastTaskEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.FastTaskEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastTaskEnvironment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FastTaskEnvironment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string queue_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironment.queue_id");
        object = msg->mutable_queue_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string namespace = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironment.namespace");
        object = msg->mutable_namespace_();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string pod_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironment.pod_id");
        object = msg->mutable_pod_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastTaskEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.FastTaskEnvironment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string queue_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_id().data(), static_cast<int>(this->queue_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironment.queue_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironment.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pod_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pod_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pod_id().data(), static_cast<int>(this->pod_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironment.pod_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.FastTaskEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.FastTaskEnvironment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastTaskEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.FastTaskEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_id = 1;
  if (this->queue_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_id().data(), static_cast<int>(this->queue_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.queue_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queue_id(), output);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namespace_(), output);
  }

  // string pod_id = 3;
  if (this->pod_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_id().data(), static_cast<int>(this->pod_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.pod_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pod_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.FastTaskEnvironment)
}

::google::protobuf::uint8* FastTaskEnvironment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.FastTaskEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_id = 1;
  if (this->queue_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_id().data(), static_cast<int>(this->queue_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.queue_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue_id(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->namespace_(), target);
  }

  // string pod_id = 3;
  if (this->pod_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_id().data(), static_cast<int>(this->pod_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.pod_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pod_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.FastTaskEnvironment)
  return target;
}

size_t FastTaskEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.FastTaskEnvironment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_id = 1;
  if (this->queue_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_id());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string pod_id = 3;
  if (this->pod_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pod_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastTaskEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.FastTaskEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const FastTaskEnvironment* source =
      ::google::protobuf::DynamicCastToGenerated<FastTaskEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.FastTaskEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.FastTaskEnvironment)
    MergeFrom(*source);
  }
}

void FastTaskEnvironment::MergeFrom(const FastTaskEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.FastTaskEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_id().size() > 0) {

    queue_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_id_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.pod_id().size() > 0) {

    pod_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_id_);
  }
}

void FastTaskEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.FastTaskEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastTaskEnvironment::CopyFrom(const FastTaskEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.FastTaskEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastTaskEnvironment::IsInitialized() const {
  return true;
}

void FastTaskEnvironment::Swap(FastTaskEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastTaskEnvironment::InternalSwap(FastTaskEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_id_.Swap(&other->queue_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace__.Swap(&other->namespace__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pod_id_.Swap(&other->pod_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FastTaskEnvironment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fpersistent_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fpersistent_5fenvs_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::core::EnvironmentAssignment* Arena::CreateMaybeMessage< ::flyteidl::core::EnvironmentAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::EnvironmentAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Environment* Arena::CreateMaybeMessage< ::flyteidl::core::Environment >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Environment >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::FastTaskEnvironment* Arena::CreateMaybeMessage< ::flyteidl::core::FastTaskEnvironment >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::FastTaskEnvironment >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
