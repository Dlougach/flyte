// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/execution_envs.proto

#include "flyteidl/core/execution_envs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_5fenvs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_5fenvs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_5fenvs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_5fenvs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto;
namespace flyteidl {
namespace core {
class ExecutionEnvironmentAssignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionEnvironmentAssignment> _instance;
  const ::flyteidl::core::ExecutionEnvironment* environment_;
  const ::flyteidl::core::ExecutionEnvironmentSpec* environment_spec_;
} _ExecutionEnvironmentAssignment_default_instance_;
class ExecutionEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionEnvironment> _instance;
} _ExecutionEnvironment_default_instance_;
class FastTaskEnvironmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastTaskEnvironment> _instance;
} _FastTaskEnvironment_default_instance_;
class ExecutionEnvironmentSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecutionEnvironmentSpec> _instance;
} _ExecutionEnvironmentSpec_default_instance_;
class FastTaskEnvironmentSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FastTaskEnvironmentSpec> _instance;
} _FastTaskEnvironmentSpec_default_instance_;
}  // namespace core
}  // namespace flyteidl
static void InitDefaultsExecutionEnvironmentAssignment_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ExecutionEnvironmentAssignment_default_instance_;
    new (ptr) ::flyteidl::core::ExecutionEnvironmentAssignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ExecutionEnvironmentAssignment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ExecutionEnvironmentAssignment_flyteidl_2fcore_2fexecution_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsExecutionEnvironmentAssignment_flyteidl_2fcore_2fexecution_5fenvs_2eproto}, {
      &scc_info_ExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base,
      &scc_info_ExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base,}};

static void InitDefaultsExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ExecutionEnvironment_default_instance_;
    new (ptr) ::flyteidl::core::ExecutionEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ExecutionEnvironment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto}, {
      &scc_info_FastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base,}};

static void InitDefaultsFastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_FastTaskEnvironment_default_instance_;
    new (ptr) ::flyteidl::core::FastTaskEnvironment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::FastTaskEnvironment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto}, {}};

static void InitDefaultsExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ExecutionEnvironmentSpec_default_instance_;
    new (ptr) ::flyteidl::core::ExecutionEnvironmentSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ExecutionEnvironmentSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto}, {
      &scc_info_FastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base,}};

static void InitDefaultsFastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_FastTaskEnvironmentSpec_default_instance_;
    new (ptr) ::flyteidl::core::FastTaskEnvironmentSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::FastTaskEnvironmentSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto}, {}};

void InitDefaults_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionEnvironmentAssignment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fcore_2fexecution_5fenvs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentAssignment, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentAssignment, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentAssignment, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentAssignment, node_ids_),
  offsetof(::flyteidl::core::ExecutionEnvironmentAssignmentDefaultTypeInternal, environment_),
  offsetof(::flyteidl::core::ExecutionEnvironmentAssignmentDefaultTypeInternal, environment_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentAssignment, assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironment, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironment, fast_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, queue_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, namespace__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironment, pod_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentSpec, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ExecutionEnvironmentSpec, fast_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironmentSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironmentSpec, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::FastTaskEnvironmentSpec, replica_count_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::ExecutionEnvironmentAssignment)},
  { 10, -1, sizeof(::flyteidl::core::ExecutionEnvironment)},
  { 17, -1, sizeof(::flyteidl::core::FastTaskEnvironment)},
  { 25, -1, sizeof(::flyteidl::core::ExecutionEnvironmentSpec)},
  { 32, -1, sizeof(::flyteidl::core::FastTaskEnvironmentSpec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ExecutionEnvironmentAssignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ExecutionEnvironment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_FastTaskEnvironment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ExecutionEnvironmentSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_FastTaskEnvironmentSpec_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto = {
  {}, AddDescriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto, "flyteidl/core/execution_envs.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fcore_2fexecution_5fenvs_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto, 5, file_level_enum_descriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fcore_2fexecution_5fenvs_2eproto[] =
  "\n\"flyteidl/core/execution_envs.proto\022\rfl"
  "yteidl.core\032\036flyteidl/core/identifier.pr"
  "oto\"\315\001\n\036ExecutionEnvironmentAssignment\022\n"
  "\n\002id\030\001 \001(\t\022\020\n\010node_ids\030\002 \003(\t\022:\n\013environm"
  "ent\030\003 \001(\0132#.flyteidl.core.ExecutionEnvir"
  "onmentH\000\022C\n\020environment_spec\030\004 \001(\0132\'.fly"
  "teidl.core.ExecutionEnvironmentSpecH\000B\014\n"
  "\nassignment\"{\n\024ExecutionEnvironment\022,\n\004t"
  "ype\030\001 \001(\0162\036.flyteidl.core.EnvironmentTyp"
  "e\0225\n\tfast_task\030\002 \001(\0132\".flyteidl.core.Fas"
  "tTaskEnvironment\"L\n\023FastTaskEnvironment\022"
  "\020\n\010queue_id\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t\022\020\n\010"
  "pod_name\030\003 \001(\t\"\203\001\n\030ExecutionEnvironmentS"
  "pec\022,\n\004type\030\001 \001(\0162\036.flyteidl.core.Enviro"
  "nmentType\0229\n\tfast_task\030\002 \001(\0132&.flyteidl."
  "core.FastTaskEnvironmentSpec\"\?\n\027FastTask"
  "EnvironmentSpec\022\r\n\005image\030\001 \001(\t\022\025\n\rreplic"
  "a_count\030\002 \001(\005* \n\017EnvironmentType\022\r\n\tFAST"
  "_TASK\020\000B<Z:github.com/flyteorg/flyte/fly"
  "teidl/gen/pb-go/flyteidl/coreb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto = {
  false, InitDefaults_flyteidl_2fcore_2fexecution_5fenvs_2eproto, 
  descriptor_table_protodef_flyteidl_2fcore_2fexecution_5fenvs_2eproto,
  "flyteidl/core/execution_envs.proto", &assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto, 797,
};

void AddDescriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fcore_2fexecution_5fenvs_2eproto = []() { AddDescriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto(); return true; }();
namespace flyteidl {
namespace core {
const ::google::protobuf::EnumDescriptor* EnvironmentType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto[0];
}
bool EnvironmentType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ExecutionEnvironmentAssignment::InitAsDefaultInstance() {
  ::flyteidl::core::_ExecutionEnvironmentAssignment_default_instance_.environment_ = const_cast< ::flyteidl::core::ExecutionEnvironment*>(
      ::flyteidl::core::ExecutionEnvironment::internal_default_instance());
  ::flyteidl::core::_ExecutionEnvironmentAssignment_default_instance_.environment_spec_ = const_cast< ::flyteidl::core::ExecutionEnvironmentSpec*>(
      ::flyteidl::core::ExecutionEnvironmentSpec::internal_default_instance());
}
class ExecutionEnvironmentAssignment::HasBitSetters {
 public:
  static const ::flyteidl::core::ExecutionEnvironment& environment(const ExecutionEnvironmentAssignment* msg);
  static const ::flyteidl::core::ExecutionEnvironmentSpec& environment_spec(const ExecutionEnvironmentAssignment* msg);
};

const ::flyteidl::core::ExecutionEnvironment&
ExecutionEnvironmentAssignment::HasBitSetters::environment(const ExecutionEnvironmentAssignment* msg) {
  return *msg->assignment_.environment_;
}
const ::flyteidl::core::ExecutionEnvironmentSpec&
ExecutionEnvironmentAssignment::HasBitSetters::environment_spec(const ExecutionEnvironmentAssignment* msg) {
  return *msg->assignment_.environment_spec_;
}
void ExecutionEnvironmentAssignment::set_allocated_environment(::flyteidl::core::ExecutionEnvironment* environment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_assignment();
  if (environment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    set_has_environment();
    assignment_.environment_ = environment;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionEnvironmentAssignment.environment)
}
void ExecutionEnvironmentAssignment::set_allocated_environment_spec(::flyteidl::core::ExecutionEnvironmentSpec* environment_spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_assignment();
  if (environment_spec) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environment_spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, environment_spec, submessage_arena);
    }
    set_has_environment_spec();
    assignment_.environment_spec_ = environment_spec;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionEnvironmentAssignment.environment_spec)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionEnvironmentAssignment::kIdFieldNumber;
const int ExecutionEnvironmentAssignment::kNodeIdsFieldNumber;
const int ExecutionEnvironmentAssignment::kEnvironmentFieldNumber;
const int ExecutionEnvironmentAssignment::kEnvironmentSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionEnvironmentAssignment::ExecutionEnvironmentAssignment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ExecutionEnvironmentAssignment)
}
ExecutionEnvironmentAssignment::ExecutionEnvironmentAssignment(const ExecutionEnvironmentAssignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      node_ids_(from.node_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  clear_has_assignment();
  switch (from.assignment_case()) {
    case kEnvironment: {
      mutable_environment()->::flyteidl::core::ExecutionEnvironment::MergeFrom(from.environment());
      break;
    }
    case kEnvironmentSpec: {
      mutable_environment_spec()->::flyteidl::core::ExecutionEnvironmentSpec::MergeFrom(from.environment_spec());
      break;
    }
    case ASSIGNMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ExecutionEnvironmentAssignment)
}

void ExecutionEnvironmentAssignment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionEnvironmentAssignment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_assignment();
}

ExecutionEnvironmentAssignment::~ExecutionEnvironmentAssignment() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ExecutionEnvironmentAssignment)
  SharedDtor();
}

void ExecutionEnvironmentAssignment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_assignment()) {
    clear_assignment();
  }
}

void ExecutionEnvironmentAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionEnvironmentAssignment& ExecutionEnvironmentAssignment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionEnvironmentAssignment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void ExecutionEnvironmentAssignment::clear_assignment() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.ExecutionEnvironmentAssignment)
  switch (assignment_case()) {
    case kEnvironment: {
      delete assignment_.environment_;
      break;
    }
    case kEnvironmentSpec: {
      delete assignment_.environment_spec_;
      break;
    }
    case ASSIGNMENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ASSIGNMENT_NOT_SET;
}


void ExecutionEnvironmentAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ExecutionEnvironmentAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_ids_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_assignment();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionEnvironmentAssignment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionEnvironmentAssignment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.ExecutionEnvironmentAssignment.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string node_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.core.ExecutionEnvironmentAssignment.node_ids");
          object = msg->add_node_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // .flyteidl.core.ExecutionEnvironment environment = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ExecutionEnvironment::_InternalParse;
        object = msg->mutable_environment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ExecutionEnvironmentSpec environment_spec = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ExecutionEnvironmentSpec::_InternalParse;
        object = msg->mutable_environment_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionEnvironmentAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ExecutionEnvironmentAssignment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ExecutionEnvironmentAssignment.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string node_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_node_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_ids(this->node_ids_size() - 1).data(),
            static_cast<int>(this->node_ids(this->node_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.ExecutionEnvironmentAssignment.node_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionEnvironment environment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ExecutionEnvironmentSpec environment_spec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_environment_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ExecutionEnvironmentAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ExecutionEnvironmentAssignment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionEnvironmentAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ExecutionEnvironmentAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ExecutionEnvironmentAssignment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string node_ids = 2;
  for (int i = 0, n = this->node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ids(i).data(), static_cast<int>(this->node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ExecutionEnvironmentAssignment.node_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_ids(i), output);
  }

  // .flyteidl.core.ExecutionEnvironment environment = 3;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::environment(this), output);
  }

  // .flyteidl.core.ExecutionEnvironmentSpec environment_spec = 4;
  if (has_environment_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::environment_spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ExecutionEnvironmentAssignment)
}

::google::protobuf::uint8* ExecutionEnvironmentAssignment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ExecutionEnvironmentAssignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ExecutionEnvironmentAssignment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string node_ids = 2;
  for (int i = 0, n = this->node_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_ids(i).data(), static_cast<int>(this->node_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.ExecutionEnvironmentAssignment.node_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->node_ids(i), target);
  }

  // .flyteidl.core.ExecutionEnvironment environment = 3;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::environment(this), target);
  }

  // .flyteidl.core.ExecutionEnvironmentSpec environment_spec = 4;
  if (has_environment_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::environment_spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ExecutionEnvironmentAssignment)
  return target;
}

size_t ExecutionEnvironmentAssignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ExecutionEnvironmentAssignment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string node_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->node_ids_size());
  for (int i = 0, n = this->node_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->node_ids(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  switch (assignment_case()) {
    // .flyteidl.core.ExecutionEnvironment environment = 3;
    case kEnvironment: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *assignment_.environment_);
      break;
    }
    // .flyteidl.core.ExecutionEnvironmentSpec environment_spec = 4;
    case kEnvironmentSpec: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *assignment_.environment_spec_);
      break;
    }
    case ASSIGNMENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionEnvironmentAssignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ExecutionEnvironmentAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionEnvironmentAssignment* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionEnvironmentAssignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ExecutionEnvironmentAssignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ExecutionEnvironmentAssignment)
    MergeFrom(*source);
  }
}

void ExecutionEnvironmentAssignment::MergeFrom(const ExecutionEnvironmentAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ExecutionEnvironmentAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_ids_.MergeFrom(from.node_ids_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  switch (from.assignment_case()) {
    case kEnvironment: {
      mutable_environment()->::flyteidl::core::ExecutionEnvironment::MergeFrom(from.environment());
      break;
    }
    case kEnvironmentSpec: {
      mutable_environment_spec()->::flyteidl::core::ExecutionEnvironmentSpec::MergeFrom(from.environment_spec());
      break;
    }
    case ASSIGNMENT_NOT_SET: {
      break;
    }
  }
}

void ExecutionEnvironmentAssignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ExecutionEnvironmentAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionEnvironmentAssignment::CopyFrom(const ExecutionEnvironmentAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ExecutionEnvironmentAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionEnvironmentAssignment::IsInitialized() const {
  return true;
}

void ExecutionEnvironmentAssignment::Swap(ExecutionEnvironmentAssignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionEnvironmentAssignment::InternalSwap(ExecutionEnvironmentAssignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_ids_.InternalSwap(CastToBase(&other->node_ids_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(assignment_, other->assignment_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ExecutionEnvironmentAssignment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionEnvironment::InitAsDefaultInstance() {
  ::flyteidl::core::_ExecutionEnvironment_default_instance_._instance.get_mutable()->fast_task_ = const_cast< ::flyteidl::core::FastTaskEnvironment*>(
      ::flyteidl::core::FastTaskEnvironment::internal_default_instance());
}
class ExecutionEnvironment::HasBitSetters {
 public:
  static const ::flyteidl::core::FastTaskEnvironment& fast_task(const ExecutionEnvironment* msg);
};

const ::flyteidl::core::FastTaskEnvironment&
ExecutionEnvironment::HasBitSetters::fast_task(const ExecutionEnvironment* msg) {
  return *msg->fast_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionEnvironment::kTypeFieldNumber;
const int ExecutionEnvironment::kFastTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionEnvironment::ExecutionEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ExecutionEnvironment)
}
ExecutionEnvironment::ExecutionEnvironment(const ExecutionEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fast_task()) {
    fast_task_ = new ::flyteidl::core::FastTaskEnvironment(*from.fast_task_);
  } else {
    fast_task_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ExecutionEnvironment)
}

void ExecutionEnvironment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  ::memset(&fast_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fast_task_)) + sizeof(type_));
}

ExecutionEnvironment::~ExecutionEnvironment() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ExecutionEnvironment)
  SharedDtor();
}

void ExecutionEnvironment::SharedDtor() {
  if (this != internal_default_instance()) delete fast_task_;
}

void ExecutionEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionEnvironment& ExecutionEnvironment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void ExecutionEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ExecutionEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fast_task_ != nullptr) {
    delete fast_task_;
  }
  fast_task_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionEnvironment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionEnvironment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.EnvironmentType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::flyteidl::core::EnvironmentType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.FastTaskEnvironment fast_task = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::FastTaskEnvironment::_InternalParse;
        object = msg->mutable_fast_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ExecutionEnvironment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.EnvironmentType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::flyteidl::core::EnvironmentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.FastTaskEnvironment fast_task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fast_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ExecutionEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ExecutionEnvironment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ExecutionEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.EnvironmentType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .flyteidl.core.FastTaskEnvironment fast_task = 2;
  if (this->has_fast_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fast_task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ExecutionEnvironment)
}

::google::protobuf::uint8* ExecutionEnvironment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ExecutionEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.EnvironmentType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .flyteidl.core.FastTaskEnvironment fast_task = 2;
  if (this->has_fast_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fast_task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ExecutionEnvironment)
  return target;
}

size_t ExecutionEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ExecutionEnvironment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.FastTaskEnvironment fast_task = 2;
  if (this->has_fast_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fast_task_);
  }

  // .flyteidl.core.EnvironmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ExecutionEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionEnvironment* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ExecutionEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ExecutionEnvironment)
    MergeFrom(*source);
  }
}

void ExecutionEnvironment::MergeFrom(const ExecutionEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ExecutionEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fast_task()) {
    mutable_fast_task()->::flyteidl::core::FastTaskEnvironment::MergeFrom(from.fast_task());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ExecutionEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ExecutionEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionEnvironment::CopyFrom(const ExecutionEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ExecutionEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionEnvironment::IsInitialized() const {
  return true;
}

void ExecutionEnvironment::Swap(ExecutionEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionEnvironment::InternalSwap(ExecutionEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fast_task_, other->fast_task_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ExecutionEnvironment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FastTaskEnvironment::InitAsDefaultInstance() {
}
class FastTaskEnvironment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastTaskEnvironment::kQueueIdFieldNumber;
const int FastTaskEnvironment::kNamespaceFieldNumber;
const int FastTaskEnvironment::kPodNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastTaskEnvironment::FastTaskEnvironment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.FastTaskEnvironment)
}
FastTaskEnvironment::FastTaskEnvironment(const FastTaskEnvironment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  queue_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_id().size() > 0) {
    queue_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_id_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  pod_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pod_name().size() > 0) {
    pod_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_name_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.FastTaskEnvironment)
}

void FastTaskEnvironment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  queue_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FastTaskEnvironment::~FastTaskEnvironment() {
  // @@protoc_insertion_point(destructor:flyteidl.core.FastTaskEnvironment)
  SharedDtor();
}

void FastTaskEnvironment::SharedDtor() {
  queue_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FastTaskEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastTaskEnvironment& FastTaskEnvironment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FastTaskEnvironment_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void FastTaskEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.FastTaskEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queue_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastTaskEnvironment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FastTaskEnvironment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string queue_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironment.queue_id");
        object = msg->mutable_queue_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string namespace = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironment.namespace");
        object = msg->mutable_namespace_();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string pod_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironment.pod_name");
        object = msg->mutable_pod_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastTaskEnvironment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.FastTaskEnvironment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string queue_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_id().data(), static_cast<int>(this->queue_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironment.queue_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironment.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pod_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pod_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pod_name().data(), static_cast<int>(this->pod_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironment.pod_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.FastTaskEnvironment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.FastTaskEnvironment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastTaskEnvironment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.FastTaskEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_id = 1;
  if (this->queue_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_id().data(), static_cast<int>(this->queue_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.queue_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queue_id(), output);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namespace_(), output);
  }

  // string pod_name = 3;
  if (this->pod_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_name().data(), static_cast<int>(this->pod_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.pod_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pod_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.FastTaskEnvironment)
}

::google::protobuf::uint8* FastTaskEnvironment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.FastTaskEnvironment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queue_id = 1;
  if (this->queue_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_id().data(), static_cast<int>(this->queue_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.queue_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue_id(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->namespace_(), target);
  }

  // string pod_name = 3;
  if (this->pod_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pod_name().data(), static_cast<int>(this->pod_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironment.pod_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pod_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.FastTaskEnvironment)
  return target;
}

size_t FastTaskEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.FastTaskEnvironment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string queue_id = 1;
  if (this->queue_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_id());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string pod_name = 3;
  if (this->pod_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pod_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastTaskEnvironment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.FastTaskEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const FastTaskEnvironment* source =
      ::google::protobuf::DynamicCastToGenerated<FastTaskEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.FastTaskEnvironment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.FastTaskEnvironment)
    MergeFrom(*source);
  }
}

void FastTaskEnvironment::MergeFrom(const FastTaskEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.FastTaskEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.queue_id().size() > 0) {

    queue_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_id_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.pod_name().size() > 0) {

    pod_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pod_name_);
  }
}

void FastTaskEnvironment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.FastTaskEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastTaskEnvironment::CopyFrom(const FastTaskEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.FastTaskEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastTaskEnvironment::IsInitialized() const {
  return true;
}

void FastTaskEnvironment::Swap(FastTaskEnvironment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastTaskEnvironment::InternalSwap(FastTaskEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queue_id_.Swap(&other->queue_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace__.Swap(&other->namespace__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pod_name_.Swap(&other->pod_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FastTaskEnvironment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ExecutionEnvironmentSpec::InitAsDefaultInstance() {
  ::flyteidl::core::_ExecutionEnvironmentSpec_default_instance_._instance.get_mutable()->fast_task_ = const_cast< ::flyteidl::core::FastTaskEnvironmentSpec*>(
      ::flyteidl::core::FastTaskEnvironmentSpec::internal_default_instance());
}
class ExecutionEnvironmentSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::FastTaskEnvironmentSpec& fast_task(const ExecutionEnvironmentSpec* msg);
};

const ::flyteidl::core::FastTaskEnvironmentSpec&
ExecutionEnvironmentSpec::HasBitSetters::fast_task(const ExecutionEnvironmentSpec* msg) {
  return *msg->fast_task_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecutionEnvironmentSpec::kTypeFieldNumber;
const int ExecutionEnvironmentSpec::kFastTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecutionEnvironmentSpec::ExecutionEnvironmentSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ExecutionEnvironmentSpec)
}
ExecutionEnvironmentSpec::ExecutionEnvironmentSpec(const ExecutionEnvironmentSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fast_task()) {
    fast_task_ = new ::flyteidl::core::FastTaskEnvironmentSpec(*from.fast_task_);
  } else {
    fast_task_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ExecutionEnvironmentSpec)
}

void ExecutionEnvironmentSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  ::memset(&fast_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&fast_task_)) + sizeof(type_));
}

ExecutionEnvironmentSpec::~ExecutionEnvironmentSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ExecutionEnvironmentSpec)
  SharedDtor();
}

void ExecutionEnvironmentSpec::SharedDtor() {
  if (this != internal_default_instance()) delete fast_task_;
}

void ExecutionEnvironmentSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExecutionEnvironmentSpec& ExecutionEnvironmentSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ExecutionEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void ExecutionEnvironmentSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ExecutionEnvironmentSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fast_task_ != nullptr) {
    delete fast_task_;
  }
  fast_task_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExecutionEnvironmentSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ExecutionEnvironmentSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.EnvironmentType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::flyteidl::core::EnvironmentType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.FastTaskEnvironmentSpec fast_task = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::FastTaskEnvironmentSpec::_InternalParse;
        object = msg->mutable_fast_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExecutionEnvironmentSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ExecutionEnvironmentSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.EnvironmentType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::flyteidl::core::EnvironmentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.FastTaskEnvironmentSpec fast_task = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fast_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ExecutionEnvironmentSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ExecutionEnvironmentSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExecutionEnvironmentSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ExecutionEnvironmentSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.EnvironmentType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .flyteidl.core.FastTaskEnvironmentSpec fast_task = 2;
  if (this->has_fast_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::fast_task(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ExecutionEnvironmentSpec)
}

::google::protobuf::uint8* ExecutionEnvironmentSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ExecutionEnvironmentSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.EnvironmentType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .flyteidl.core.FastTaskEnvironmentSpec fast_task = 2;
  if (this->has_fast_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::fast_task(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ExecutionEnvironmentSpec)
  return target;
}

size_t ExecutionEnvironmentSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ExecutionEnvironmentSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.FastTaskEnvironmentSpec fast_task = 2;
  if (this->has_fast_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fast_task_);
  }

  // .flyteidl.core.EnvironmentType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExecutionEnvironmentSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ExecutionEnvironmentSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecutionEnvironmentSpec* source =
      ::google::protobuf::DynamicCastToGenerated<ExecutionEnvironmentSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ExecutionEnvironmentSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ExecutionEnvironmentSpec)
    MergeFrom(*source);
  }
}

void ExecutionEnvironmentSpec::MergeFrom(const ExecutionEnvironmentSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ExecutionEnvironmentSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fast_task()) {
    mutable_fast_task()->::flyteidl::core::FastTaskEnvironmentSpec::MergeFrom(from.fast_task());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ExecutionEnvironmentSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ExecutionEnvironmentSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionEnvironmentSpec::CopyFrom(const ExecutionEnvironmentSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ExecutionEnvironmentSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionEnvironmentSpec::IsInitialized() const {
  return true;
}

void ExecutionEnvironmentSpec::Swap(ExecutionEnvironmentSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecutionEnvironmentSpec::InternalSwap(ExecutionEnvironmentSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fast_task_, other->fast_task_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata ExecutionEnvironmentSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FastTaskEnvironmentSpec::InitAsDefaultInstance() {
}
class FastTaskEnvironmentSpec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FastTaskEnvironmentSpec::kImageFieldNumber;
const int FastTaskEnvironmentSpec::kReplicaCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FastTaskEnvironmentSpec::FastTaskEnvironmentSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.FastTaskEnvironmentSpec)
}
FastTaskEnvironmentSpec::FastTaskEnvironmentSpec(const FastTaskEnvironmentSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  replica_count_ = from.replica_count_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.FastTaskEnvironmentSpec)
}

void FastTaskEnvironmentSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replica_count_ = 0;
}

FastTaskEnvironmentSpec::~FastTaskEnvironmentSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.FastTaskEnvironmentSpec)
  SharedDtor();
}

void FastTaskEnvironmentSpec::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FastTaskEnvironmentSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastTaskEnvironmentSpec& FastTaskEnvironmentSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FastTaskEnvironmentSpec_flyteidl_2fcore_2fexecution_5fenvs_2eproto.base);
  return *internal_default_instance();
}


void FastTaskEnvironmentSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.FastTaskEnvironmentSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replica_count_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastTaskEnvironmentSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FastTaskEnvironmentSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.FastTaskEnvironmentSpec.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 replica_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_replica_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastTaskEnvironmentSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.FastTaskEnvironmentSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.FastTaskEnvironmentSpec.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replica_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.FastTaskEnvironmentSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.FastTaskEnvironmentSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastTaskEnvironmentSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.FastTaskEnvironmentSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironmentSpec.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->image(), output);
  }

  // int32 replica_count = 2;
  if (this->replica_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.FastTaskEnvironmentSpec)
}

::google::protobuf::uint8* FastTaskEnvironmentSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.FastTaskEnvironmentSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.FastTaskEnvironmentSpec.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // int32 replica_count = 2;
  if (this->replica_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.FastTaskEnvironmentSpec)
  return target;
}

size_t FastTaskEnvironmentSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.FastTaskEnvironmentSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // int32 replica_count = 2;
  if (this->replica_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastTaskEnvironmentSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.FastTaskEnvironmentSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const FastTaskEnvironmentSpec* source =
      ::google::protobuf::DynamicCastToGenerated<FastTaskEnvironmentSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.FastTaskEnvironmentSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.FastTaskEnvironmentSpec)
    MergeFrom(*source);
  }
}

void FastTaskEnvironmentSpec::MergeFrom(const FastTaskEnvironmentSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.FastTaskEnvironmentSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.replica_count() != 0) {
    set_replica_count(from.replica_count());
  }
}

void FastTaskEnvironmentSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.FastTaskEnvironmentSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastTaskEnvironmentSpec::CopyFrom(const FastTaskEnvironmentSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.FastTaskEnvironmentSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastTaskEnvironmentSpec::IsInitialized() const {
  return true;
}

void FastTaskEnvironmentSpec::Swap(FastTaskEnvironmentSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FastTaskEnvironmentSpec::InternalSwap(FastTaskEnvironmentSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replica_count_, other->replica_count_);
}

::google::protobuf::Metadata FastTaskEnvironmentSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fexecution_5fenvs_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fexecution_5fenvs_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::core::ExecutionEnvironmentAssignment* Arena::CreateMaybeMessage< ::flyteidl::core::ExecutionEnvironmentAssignment >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ExecutionEnvironmentAssignment >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ExecutionEnvironment* Arena::CreateMaybeMessage< ::flyteidl::core::ExecutionEnvironment >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ExecutionEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::FastTaskEnvironment* Arena::CreateMaybeMessage< ::flyteidl::core::FastTaskEnvironment >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::FastTaskEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ExecutionEnvironmentSpec* Arena::CreateMaybeMessage< ::flyteidl::core::ExecutionEnvironmentSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ExecutionEnvironmentSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::FastTaskEnvironmentSpec* Arena::CreateMaybeMessage< ::flyteidl::core::FastTaskEnvironmentSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::FastTaskEnvironmentSpec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
