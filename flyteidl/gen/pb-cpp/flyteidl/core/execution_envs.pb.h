// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/execution_envs.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_5fenvs_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_5fenvs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_5fenvs_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fexecution_5fenvs_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2fexecution_5fenvs_2eproto();
namespace flyteidl {
namespace core {
class ExecutionEnvironmentAssignment;
class ExecutionEnvironmentAssignmentDefaultTypeInternal;
extern ExecutionEnvironmentAssignmentDefaultTypeInternal _ExecutionEnvironmentAssignment_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::ExecutionEnvironmentAssignment* Arena::CreateMaybeMessage<::flyteidl::core::ExecutionEnvironmentAssignment>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

// ===================================================================

class ExecutionEnvironmentAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ExecutionEnvironmentAssignment) */ {
 public:
  ExecutionEnvironmentAssignment();
  virtual ~ExecutionEnvironmentAssignment();

  ExecutionEnvironmentAssignment(const ExecutionEnvironmentAssignment& from);

  inline ExecutionEnvironmentAssignment& operator=(const ExecutionEnvironmentAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionEnvironmentAssignment(ExecutionEnvironmentAssignment&& from) noexcept
    : ExecutionEnvironmentAssignment() {
    *this = ::std::move(from);
  }

  inline ExecutionEnvironmentAssignment& operator=(ExecutionEnvironmentAssignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ExecutionEnvironmentAssignment& default_instance();

  enum AssignmentCase {
    kEnvironment = 4,
    kEnvironmentSpec = 5,
    ASSIGNMENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionEnvironmentAssignment* internal_default_instance() {
    return reinterpret_cast<const ExecutionEnvironmentAssignment*>(
               &_ExecutionEnvironmentAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ExecutionEnvironmentAssignment* other);
  friend void swap(ExecutionEnvironmentAssignment& a, ExecutionEnvironmentAssignment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionEnvironmentAssignment* New() const final {
    return CreateMaybeMessage<ExecutionEnvironmentAssignment>(nullptr);
  }

  ExecutionEnvironmentAssignment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionEnvironmentAssignment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExecutionEnvironmentAssignment& from);
  void MergeFrom(const ExecutionEnvironmentAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionEnvironmentAssignment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string node_ids = 2;
  int node_ids_size() const;
  void clear_node_ids();
  static const int kNodeIdsFieldNumber = 2;
  const ::std::string& node_ids(int index) const;
  ::std::string* mutable_node_ids(int index);
  void set_node_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_node_ids(int index, ::std::string&& value);
  #endif
  void set_node_ids(int index, const char* value);
  void set_node_ids(int index, const char* value, size_t size);
  ::std::string* add_node_ids();
  void add_node_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_node_ids(::std::string&& value);
  #endif
  void add_node_ids(const char* value);
  void add_node_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& node_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_node_ids();

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .google.protobuf.Struct environment = 4;
  bool has_environment() const;
  void clear_environment();
  static const int kEnvironmentFieldNumber = 4;
  const ::google::protobuf::Struct& environment() const;
  ::google::protobuf::Struct* release_environment();
  ::google::protobuf::Struct* mutable_environment();
  void set_allocated_environment(::google::protobuf::Struct* environment);

  // .google.protobuf.Struct environment_spec = 5;
  bool has_environment_spec() const;
  void clear_environment_spec();
  static const int kEnvironmentSpecFieldNumber = 5;
  const ::google::protobuf::Struct& environment_spec() const;
  ::google::protobuf::Struct* release_environment_spec();
  ::google::protobuf::Struct* mutable_environment_spec();
  void set_allocated_environment_spec(::google::protobuf::Struct* environment_spec);

  void clear_assignment();
  AssignmentCase assignment_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.ExecutionEnvironmentAssignment)
 private:
  class HasBitSetters;
  void set_has_environment();
  void set_has_environment_spec();

  inline bool has_assignment() const;
  inline void clear_has_assignment();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> node_ids_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  union AssignmentUnion {
    AssignmentUnion() {}
    ::google::protobuf::Struct* environment_;
    ::google::protobuf::Struct* environment_spec_;
  } assignment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fexecution_5fenvs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutionEnvironmentAssignment

// string id = 1;
inline void ExecutionEnvironmentAssignment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionEnvironmentAssignment::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionEnvironmentAssignment.id)
  return id_.GetNoArena();
}
inline void ExecutionEnvironmentAssignment::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionEnvironmentAssignment.id)
}
#if LANG_CXX11
inline void ExecutionEnvironmentAssignment::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.ExecutionEnvironmentAssignment.id)
}
#endif
inline void ExecutionEnvironmentAssignment::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ExecutionEnvironmentAssignment.id)
}
inline void ExecutionEnvironmentAssignment::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ExecutionEnvironmentAssignment.id)
}
inline ::std::string* ExecutionEnvironmentAssignment::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionEnvironmentAssignment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionEnvironmentAssignment::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionEnvironmentAssignment.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionEnvironmentAssignment::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionEnvironmentAssignment.id)
}

// repeated string node_ids = 2;
inline int ExecutionEnvironmentAssignment::node_ids_size() const {
  return node_ids_.size();
}
inline void ExecutionEnvironmentAssignment::clear_node_ids() {
  node_ids_.Clear();
}
inline const ::std::string& ExecutionEnvironmentAssignment::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  return node_ids_.Get(index);
}
inline ::std::string* ExecutionEnvironmentAssignment::mutable_node_ids(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  return node_ids_.Mutable(index);
}
inline void ExecutionEnvironmentAssignment::set_node_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  node_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ExecutionEnvironmentAssignment::set_node_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  node_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ExecutionEnvironmentAssignment::set_node_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
}
inline void ExecutionEnvironmentAssignment::set_node_ids(int index, const char* value, size_t size) {
  node_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
}
inline ::std::string* ExecutionEnvironmentAssignment::add_node_ids() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  return node_ids_.Add();
}
inline void ExecutionEnvironmentAssignment::add_node_ids(const ::std::string& value) {
  node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
}
#if LANG_CXX11
inline void ExecutionEnvironmentAssignment::add_node_ids(::std::string&& value) {
  node_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
}
#endif
inline void ExecutionEnvironmentAssignment::add_node_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  node_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
}
inline void ExecutionEnvironmentAssignment::add_node_ids(const char* value, size_t size) {
  node_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ExecutionEnvironmentAssignment::node_ids() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  return node_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ExecutionEnvironmentAssignment::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.ExecutionEnvironmentAssignment.node_ids)
  return &node_ids_;
}

// string type = 3;
inline void ExecutionEnvironmentAssignment::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionEnvironmentAssignment::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionEnvironmentAssignment.type)
  return type_.GetNoArena();
}
inline void ExecutionEnvironmentAssignment::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ExecutionEnvironmentAssignment.type)
}
#if LANG_CXX11
inline void ExecutionEnvironmentAssignment::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.ExecutionEnvironmentAssignment.type)
}
#endif
inline void ExecutionEnvironmentAssignment::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.ExecutionEnvironmentAssignment.type)
}
inline void ExecutionEnvironmentAssignment::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.ExecutionEnvironmentAssignment.type)
}
inline ::std::string* ExecutionEnvironmentAssignment::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionEnvironmentAssignment.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionEnvironmentAssignment::release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionEnvironmentAssignment.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionEnvironmentAssignment::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ExecutionEnvironmentAssignment.type)
}

// .google.protobuf.Struct environment = 4;
inline bool ExecutionEnvironmentAssignment::has_environment() const {
  return assignment_case() == kEnvironment;
}
inline void ExecutionEnvironmentAssignment::set_has_environment() {
  _oneof_case_[0] = kEnvironment;
}
inline ::google::protobuf::Struct* ExecutionEnvironmentAssignment::release_environment() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionEnvironmentAssignment.environment)
  if (has_environment()) {
    clear_has_assignment();
      ::google::protobuf::Struct* temp = assignment_.environment_;
    assignment_.environment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Struct& ExecutionEnvironmentAssignment::environment() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionEnvironmentAssignment.environment)
  return has_environment()
      ? *assignment_.environment_
      : *reinterpret_cast< ::google::protobuf::Struct*>(&::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* ExecutionEnvironmentAssignment::mutable_environment() {
  if (!has_environment()) {
    clear_assignment();
    set_has_environment();
    assignment_.environment_ = CreateMaybeMessage< ::google::protobuf::Struct >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionEnvironmentAssignment.environment)
  return assignment_.environment_;
}

// .google.protobuf.Struct environment_spec = 5;
inline bool ExecutionEnvironmentAssignment::has_environment_spec() const {
  return assignment_case() == kEnvironmentSpec;
}
inline void ExecutionEnvironmentAssignment::set_has_environment_spec() {
  _oneof_case_[0] = kEnvironmentSpec;
}
inline ::google::protobuf::Struct* ExecutionEnvironmentAssignment::release_environment_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ExecutionEnvironmentAssignment.environment_spec)
  if (has_environment_spec()) {
    clear_has_assignment();
      ::google::protobuf::Struct* temp = assignment_.environment_spec_;
    assignment_.environment_spec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Struct& ExecutionEnvironmentAssignment::environment_spec() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ExecutionEnvironmentAssignment.environment_spec)
  return has_environment_spec()
      ? *assignment_.environment_spec_
      : *reinterpret_cast< ::google::protobuf::Struct*>(&::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* ExecutionEnvironmentAssignment::mutable_environment_spec() {
  if (!has_environment_spec()) {
    clear_assignment();
    set_has_environment_spec();
    assignment_.environment_spec_ = CreateMaybeMessage< ::google::protobuf::Struct >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ExecutionEnvironmentAssignment.environment_spec)
  return assignment_.environment_spec_;
}

inline bool ExecutionEnvironmentAssignment::has_assignment() const {
  return assignment_case() != ASSIGNMENT_NOT_SET;
}
inline void ExecutionEnvironmentAssignment::clear_has_assignment() {
  _oneof_case_[0] = ASSIGNMENT_NOT_SET;
}
inline ExecutionEnvironmentAssignment::AssignmentCase ExecutionEnvironmentAssignment::assignment_case() const {
  return ExecutionEnvironmentAssignment::AssignmentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2fexecution_5fenvs_2eproto
