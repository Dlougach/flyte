// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/service/cache.proto

package service

import (
	context "context"
	fmt "fmt"
	core "github.com/flyteorg/flyte/flyteidl/gen/pb-go/flyteidl/core"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EvictExecutionCacheRequest struct {
	// Identifier of :ref:`ref_flyteidl.admin.Execution` to evict cache for.
	WorkflowExecutionId  *core.WorkflowExecutionIdentifier `protobuf:"bytes,1,opt,name=workflow_execution_id,json=workflowExecutionId,proto3" json:"workflow_execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *EvictExecutionCacheRequest) Reset()         { *m = EvictExecutionCacheRequest{} }
func (m *EvictExecutionCacheRequest) String() string { return proto.CompactTextString(m) }
func (*EvictExecutionCacheRequest) ProtoMessage()    {}
func (*EvictExecutionCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5ff5da69b96fa44, []int{0}
}

func (m *EvictExecutionCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictExecutionCacheRequest.Unmarshal(m, b)
}
func (m *EvictExecutionCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictExecutionCacheRequest.Marshal(b, m, deterministic)
}
func (m *EvictExecutionCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictExecutionCacheRequest.Merge(m, src)
}
func (m *EvictExecutionCacheRequest) XXX_Size() int {
	return xxx_messageInfo_EvictExecutionCacheRequest.Size(m)
}
func (m *EvictExecutionCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictExecutionCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvictExecutionCacheRequest proto.InternalMessageInfo

func (m *EvictExecutionCacheRequest) GetWorkflowExecutionId() *core.WorkflowExecutionIdentifier {
	if m != nil {
		return m.WorkflowExecutionId
	}
	return nil
}

type EvictTaskExecutionCacheRequest struct {
	// Identifier of :ref:`ref_flyteidl.admin.TaskExecution` to evict cache for.
	TaskExecutionId      *core.TaskExecutionIdentifier `protobuf:"bytes,1,opt,name=task_execution_id,json=taskExecutionId,proto3" json:"task_execution_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *EvictTaskExecutionCacheRequest) Reset()         { *m = EvictTaskExecutionCacheRequest{} }
func (m *EvictTaskExecutionCacheRequest) String() string { return proto.CompactTextString(m) }
func (*EvictTaskExecutionCacheRequest) ProtoMessage()    {}
func (*EvictTaskExecutionCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5ff5da69b96fa44, []int{1}
}

func (m *EvictTaskExecutionCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictTaskExecutionCacheRequest.Unmarshal(m, b)
}
func (m *EvictTaskExecutionCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictTaskExecutionCacheRequest.Marshal(b, m, deterministic)
}
func (m *EvictTaskExecutionCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictTaskExecutionCacheRequest.Merge(m, src)
}
func (m *EvictTaskExecutionCacheRequest) XXX_Size() int {
	return xxx_messageInfo_EvictTaskExecutionCacheRequest.Size(m)
}
func (m *EvictTaskExecutionCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictTaskExecutionCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvictTaskExecutionCacheRequest proto.InternalMessageInfo

func (m *EvictTaskExecutionCacheRequest) GetTaskExecutionId() *core.TaskExecutionIdentifier {
	if m != nil {
		return m.TaskExecutionId
	}
	return nil
}

type EvictCacheResponse struct {
	// List of errors encountered during cache eviction (if any).
	Errors               *core.CacheEvictionErrorList `protobuf:"bytes,1,opt,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *EvictCacheResponse) Reset()         { *m = EvictCacheResponse{} }
func (m *EvictCacheResponse) String() string { return proto.CompactTextString(m) }
func (*EvictCacheResponse) ProtoMessage()    {}
func (*EvictCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5ff5da69b96fa44, []int{2}
}

func (m *EvictCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictCacheResponse.Unmarshal(m, b)
}
func (m *EvictCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictCacheResponse.Marshal(b, m, deterministic)
}
func (m *EvictCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictCacheResponse.Merge(m, src)
}
func (m *EvictCacheResponse) XXX_Size() int {
	return xxx_messageInfo_EvictCacheResponse.Size(m)
}
func (m *EvictCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvictCacheResponse proto.InternalMessageInfo

func (m *EvictCacheResponse) GetErrors() *core.CacheEvictionErrorList {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*EvictExecutionCacheRequest)(nil), "flyteidl.service.EvictExecutionCacheRequest")
	proto.RegisterType((*EvictTaskExecutionCacheRequest)(nil), "flyteidl.service.EvictTaskExecutionCacheRequest")
	proto.RegisterType((*EvictCacheResponse)(nil), "flyteidl.service.EvictCacheResponse")
}

func init() { proto.RegisterFile("flyteidl/service/cache.proto", fileDescriptor_c5ff5da69b96fa44) }

var fileDescriptor_c5ff5da69b96fa44 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0x26, 0x46, 0x72, 0x68, 0x05, 0x75, 0x16, 0x51, 0x86, 0x65, 0x91, 0xa0, 0x22, 0x41, 0xa7,
	0x75, 0x3d, 0x2f, 0x82, 0x92, 0x83, 0xe0, 0x29, 0x2b, 0x08, 0x1e, 0x0c, 0x9d, 0x9e, 0xca, 0x6c,
	0x9b, 0xa4, 0x6b, 0xec, 0xae, 0x4c, 0x5c, 0x76, 0x73, 0xf1, 0x15, 0x7c, 0x00, 0x2f, 0x22, 0x78,
	0xf3, 0x5d, 0x7c, 0x05, 0xc1, 0xd7, 0x90, 0xe9, 0xf9, 0xc1, 0x99, 0x9d, 0xd6, 0xdd, 0xdb, 0x30,
	0xdf, 0x57, 0x5f, 0x7d, 0x55, 0x5f, 0xd1, 0x6c, 0x77, 0xbe, 0x3c, 0x26, 0x50, 0xf1, 0x92, 0x5b,
	0x30, 0x99, 0x92, 0xc0, 0xa5, 0x90, 0x47, 0x10, 0xa5, 0x06, 0x09, 0x83, 0xeb, 0x15, 0x1a, 0x95,
	0x68, 0xb8, 0x9b, 0x20, 0x26, 0x4b, 0xe0, 0x22, 0x55, 0x5c, 0x68, 0x8d, 0x24, 0x48, 0xa1, 0xb6,
	0x05, 0x3f, 0x0c, 0x6b, 0x35, 0x89, 0x06, 0x38, 0x18, 0x83, 0xa6, 0xc2, 0xf6, 0x9a, 0x98, 0x8a,
	0x41, 0x93, 0x9a, 0x2b, 0x30, 0x05, 0x3e, 0x3c, 0x65, 0xe1, 0x38, 0x53, 0x92, 0xc6, 0x1f, 0x41,
	0xae, 0x73, 0xd1, 0x17, 0xb9, 0x91, 0x09, 0x7c, 0x58, 0x83, 0xa5, 0xe0, 0x1d, 0xbb, 0xb9, 0x41,
	0xb3, 0x98, 0x2f, 0x71, 0x33, 0x85, 0x8a, 0x31, 0x55, 0xf1, 0xed, 0xde, 0x9d, 0xde, 0x83, 0x2b,
	0xfb, 0xa3, 0xa8, 0x76, 0x9a, 0xab, 0x47, 0x6f, 0x4a, 0x6e, 0x2d, 0xf6, 0xb2, 0x6e, 0x37, 0xd9,
	0xd9, 0x9c, 0x05, 0x87, 0xc4, 0xf6, 0x5c, 0xf7, 0xd7, 0xc2, 0x2e, 0xba, 0x1d, 0x4c, 0xd8, 0x0d,
	0x12, 0x76, 0xd1, 0xd5, 0xfd, 0x7e, 0xab, 0x7b, 0x43, 0xe4, 0xaf, 0xce, 0xd7, 0xa8, 0x09, 0x0c,
	0x0f, 0x59, 0xe0, 0xba, 0x96, 0x8d, 0x6c, 0x8a, 0xda, 0x42, 0x70, 0xc0, 0x06, 0xc5, 0xe6, 0x4a,
	0xf9, 0x7b, 0x2d, 0x79, 0xc7, 0x76, 0x75, 0x0a, 0xf5, 0x38, 0x67, 0xbe, 0x52, 0x96, 0x26, 0x65,
	0xd1, 0xfe, 0x97, 0x01, 0xbb, 0xea, 0x28, 0x87, 0x45, 0x66, 0xc1, 0xef, 0x1e, 0xdb, 0xe9, 0x58,
	0x6d, 0xf0, 0x30, 0x6a, 0xc7, 0x1b, 0xf9, 0x13, 0x08, 0xef, 0x7a, 0xd8, 0x0d, 0xef, 0xc3, 0xd3,
	0x4f, 0x3f, 0x7f, 0x7d, 0xbe, 0x94, 0x8d, 0xc8, 0x5d, 0x48, 0xf6, 0xa4, 0x38, 0x27, 0x5e, 0x2f,
	0xcd, 0xf2, 0x93, 0xce, 0x1c, 0xf3, 0x23, 0x78, 0x0f, 0x92, 0xb6, 0x3e, 0x3c, 0xc6, 0x95, 0x50,
	0xda, 0x0b, 0x6b, 0xb1, 0x82, 0x6d, 0xf0, 0xf5, 0x32, 0xbb, 0xe5, 0x89, 0x31, 0x78, 0xec, 0xf1,
	0xef, 0x4d, 0xfc, 0x9c, 0x13, 0xff, 0xe8, 0xbb, 0x91, 0xbf, 0xf7, 0x47, 0xdf, 0xfa, 0xcd, 0xa1,
	0x9b, 0xe7, 0x62, 0xf9, 0xc9, 0x99, 0xfb, 0x89, 0x34, 0xc6, 0xd0, 0xfc, 0xe3, 0x59, 0xca, 0x85,
	0x4b, 0xeb, 0x7d, 0x5d, 0xb8, 0xd2, 0xad, 0xf2, 0x7c, 0x75, 0xee, 0x8f, 0x8a, 0x3b, 0xd9, 0xee,
	0xcf, 0x7f, 0x66, 0xa8, 0x38, 0xff, 0x30, 0x5b, 0x51, 0xbc, 0xae, 0x2a, 0x42, 0x06, 0xc6, 0x2a,
	0xec, 0x16, 0x31, 0x40, 0xe6, 0x78, 0x2a, 0x88, 0x60, 0x95, 0xd2, 0xf6, 0xf9, 0xb3, 0xb7, 0x07,
	0x89, 0xa2, 0xa3, 0xf5, 0x2c, 0x92, 0xb8, 0xe2, 0x2e, 0x64, 0x34, 0x49, 0xf1, 0xc1, 0xeb, 0x67,
	0x2a, 0x01, 0xcd, 0xd3, 0xd9, 0xa3, 0x04, 0x79, 0xfb, 0x8d, 0x9c, 0x0d, 0xdc, 0x93, 0xf5, 0xf4,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x66, 0x79, 0x86, 0x3e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacheServiceClient interface {
	// Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.Execution`.
	EvictExecutionCache(ctx context.Context, in *EvictExecutionCacheRequest, opts ...grpc.CallOption) (*EvictCacheResponse, error)
	// Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.TaskExecution`.
	EvictTaskExecutionCache(ctx context.Context, in *EvictTaskExecutionCacheRequest, opts ...grpc.CallOption) (*EvictCacheResponse, error)
}

type cacheServiceClient struct {
	cc *grpc.ClientConn
}

func NewCacheServiceClient(cc *grpc.ClientConn) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) EvictExecutionCache(ctx context.Context, in *EvictExecutionCacheRequest, opts ...grpc.CallOption) (*EvictCacheResponse, error) {
	out := new(EvictCacheResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.CacheService/EvictExecutionCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) EvictTaskExecutionCache(ctx context.Context, in *EvictTaskExecutionCacheRequest, opts ...grpc.CallOption) (*EvictCacheResponse, error) {
	out := new(EvictCacheResponse)
	err := c.cc.Invoke(ctx, "/flyteidl.service.CacheService/EvictTaskExecutionCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
type CacheServiceServer interface {
	// Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.Execution`.
	EvictExecutionCache(context.Context, *EvictExecutionCacheRequest) (*EvictCacheResponse, error)
	// Evicts all cached data for the referenced :ref:`ref_flyteidl.admin.TaskExecution`.
	EvictTaskExecutionCache(context.Context, *EvictTaskExecutionCacheRequest) (*EvictCacheResponse, error)
}

// UnimplementedCacheServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCacheServiceServer struct {
}

func (*UnimplementedCacheServiceServer) EvictExecutionCache(ctx context.Context, req *EvictExecutionCacheRequest) (*EvictCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictExecutionCache not implemented")
}
func (*UnimplementedCacheServiceServer) EvictTaskExecutionCache(ctx context.Context, req *EvictTaskExecutionCacheRequest) (*EvictCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictTaskExecutionCache not implemented")
}

func RegisterCacheServiceServer(s *grpc.Server, srv CacheServiceServer) {
	s.RegisterService(&_CacheService_serviceDesc, srv)
}

func _CacheService_EvictExecutionCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictExecutionCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).EvictExecutionCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.CacheService/EvictExecutionCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).EvictExecutionCache(ctx, req.(*EvictExecutionCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_EvictTaskExecutionCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictTaskExecutionCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).EvictTaskExecutionCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flyteidl.service.CacheService/EvictTaskExecutionCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).EvictTaskExecutionCache(ctx, req.(*EvictTaskExecutionCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flyteidl.service.CacheService",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvictExecutionCache",
			Handler:    _CacheService_EvictExecutionCache_Handler,
		},
		{
			MethodName: "EvictTaskExecutionCache",
			Handler:    _CacheService_EvictTaskExecutionCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flyteidl/service/cache.proto",
}
